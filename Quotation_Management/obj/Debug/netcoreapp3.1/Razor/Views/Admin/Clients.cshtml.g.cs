#pragma checksum "C:\Softwares\Quotation_Management\Quotation_Management\Views\Admin\Clients.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "8c6ae8d202b17b925ff5cb3139ac4dea26cb3d276d8cff123d2ebe1f4a0388b4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Admin_Clients), @"mvc.1.0.view", @"/Views/Admin/Clients.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management

#nullable disable
    ;
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management.Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#nullable disable
    ;
#nullable restore
#line 5 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

#nullable disable
    ;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"8c6ae8d202b17b925ff5cb3139ac4dea26cb3d276d8cff123d2ebe1f4a0388b4", @"/Views/Admin/Clients.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"e5aa15149a6f814aca9c9febb58b8d5784979381ee3c7539cba075d77e91d2ea", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    internal sealed class Views_Admin_Clients : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_AddNewClient", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("name", "_UpdateClient", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"

<script>
    var companies;
    var clientsdata;
    var CompanyID;
    var subclientsdata;
    var clients;
    var clieNt;
    var countriEs;
    var PagesTRN;
    var isFile;

    var documnetsor;


    $(function () {
        var getPages = JSON.parse(localStorage.getItem('Pages'));
        Pages = getPages.find(dx => dx.PageName == ""Clients"");
        PagesTRN = getPages.find(dx => dx.PageName == ""TRN File"");
         

        CompanyID = localStorage.getItem('CompanyId');
        getClients(CompanyID);
        getsubClients(CompanyID);

        $("".SearchDropdown"").select2({

            dropdownParent: $(""#clientForm"")
        });

        $("".SearchDropdown1"").select2({

            dropdownParent: $(""#clientUpdateForm"")
        });

    });

    function getClients(CompanyID) {
        $.get('/Admin/GetAllClients?cmpID=' + CompanyID, function (data) {
            clientsdata = data;
            console.log(clientsdata)
            Clientsgrid(clientsdata);");
            WriteLiteral(@"
        });
    }

    function Clientsgrid(clientsdata) {

        var test = false;
        if (Pages && Pages.Create == true) {
            test = true;
        }

        isFile = function (position) { 
            return position == null;
        };

        //$.get('/Admin/GetAllRegions?comPanYID=' + CompanyID, function (data) {
        $.get('/Admin/GetRegions', function (data) {
            regions = data;


            $.get('/Admin/GetCountries', function (data) {
                countriEs = data;

            $(""#gridContainer"").dxDataGrid({
                dataSource: clientsdata,
                 showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                columnHidingEnabled: true,
                hoverStateEnabled: true,
                paging: {
                    pageSize: 10
                },
                editing: {
                    mode: 'form',
                    allowAdding: true, 
      ");
            WriteLiteral(@"              useIcons: true
                },
                columnsAutoWidth: true,
                showBorders: true,
                filterRow: {
                    visible: true,
                    applyFilter: ""auto""
                },
                searchPanel: {
                    visible: true,
                    placeholder: ""Search...""
                },
                export: {
                    enabled: true,
                },
                onExporting: function (e) {
                    console.log(e, ""e"");
                    e.fileName = ""Clients List""
                },
                headerFilter: {
                    visible: true
                },
                //onEditorPreparing(e) {
                //    if (e.parentType === 'dataRow' && e.dataField === 'TRNFile') {
                //        e.editorOptions.readOnly = isFile(e.value);
                //    }
                //},
                columns: [
                    {
            ");
            WriteLiteral(@"            dataField: ""ClientName"",
                        validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: 'RegionId',
                        caption: 'Region',
                        validationRules: [{ type: 'required' }],
                        lookup: {
                            dataSource: regions,
                            displayExpr: 'Name',
                            valueExpr: 'RegionId',
                        },
                    },
                    {
                        dataField: 'Country',
                        caption: 'Country',
                        lookup: {
                            dataSource: countriEs
                        },
                        validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: ""Email"",
                        validationRules: [{ type: 'email', message: 'Email is invalid' }]");
            WriteLiteral(@"
                    },
                    {
                        dataField: ""RefrenceAlias""
                    },
                    {
                        dataField: ""Reference""
                    },
                    {
                        dataField: ""Landline""
                    },
                    {
                        dataField: ""Address1"",
                        validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: ""Address2""
                    },
                    {
                        dataField: ""Address3""
                    },
                    {
                        dataField: ""TRN""
                    }, {
                        type: ""buttons"",
                        buttons: [""edit"",
                            { 
                                hint: ""Edit Detail"",
                                icon: ""edit"",
                                visible: function (e");
            WriteLiteral(@") {
                                    if (Pages && Pages.Update == true) {  return e; }
                                    else { return e.column.visible = false; }
                                },
                                onClick: function (e) {

                                    var iD = e.row.data.ClientId;
                                    getClientByID(iD);

                                }
                            },
                            {
                                visible: function (e) {
                                    console.log(!isFile(e.row.data.TRNFile),'f cond');
                                    if (PagesTRN && PagesTRN.Read == true && !isFile(e.row.data.TRNFile))
                                    { return e; }
                                    else
                                    { return e.column.visible = false; }
                                },

                                //visible(e) {
                              ");
            WriteLiteral(@"  //    return !isFile(e.row.data.TRNFile);
                                //},
                                hint: ""View File"",
                                 icon: ""exportpdf"",
                                onClick: function (e) {
                                    var base = new URL('/', location.href).href;
                                    console.log(base, 'baSe');
                                    console.log(base + e.row.data.TRNFile, 'paTh');

                                    window.open(base + e.row.data.TRNFile, '_blank');
                                },
                            }],
                    }],

                toolbar: {
                    items: [
                        {
                            name: 'addRowButton',
                            showText: 'always',
                            options: {
                                text: 'Add New Client',
                                type: 'default',
                               ");
            WriteLiteral(@" icon: 'add',
                                onClick: function (e) {

                                    $(""#createModal"").modal();
                                },
                                visible: test,
                            },
                        },

                    ],
                },
                //onToolbarPreparing: function (e) {
                //    var dataGrid = e.component;
                //    e.toolbarOptions.items.unshift({
                //        location: ""after"",
                //        widget: ""dxButton"",
                //        options: {
                //            name: 'addRowButton',
                //            text: 'Add New Client',
                //            icon: 'add',
                //            type: 'default',
                //            onClick: function (e) {

                //                $(""#createModal"").modal();
                //            }
                //        }
                //    }");
            WriteLiteral(@");
                //},
                 
            });

            });
        });
    }


    function getsubClients(CompanyID) {
        $.get('/Admin/GetAllSubClients?iD=' + CompanyID, function (data) {
            subclientsdata = data;
            console.log(subclientsdata)
            SubClientsgrid(subclientsdata);
        });
    }


    function SubClientsgrid(subclientsdata) {

        $.get('/Admin/GetAllClientsList', function (data) {
            clients = data;

            $(""#gridContainer2"").dxDataGrid({
                dataSource: subclientsdata,
                keyExpr: ""SubClientId"",
                showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                columnHidingEnabled: true,
                hoverStateEnabled: true,
                paging: {
                    pageSize: 10
                },
                editing: {
                    mode: 'form',
                    allowAdding:");
            WriteLiteral(@" true,
                    allowUpdating: true,
                    useIcons: true
                },
                showBorders: true,
                filterRow: {
                    visible: true,
                    applyFilter: ""auto""
                },
                searchPanel: {
                    visible: true,
                    placeholder: ""Search...""
                },
                export: {
                    enabled: true,
                },
                onExporting: function (e) {
                    console.log(e, ""e"");
                    e.fileName = ""Clients List""
                },
                headerFilter: {
                    visible: true
                }, 
                columns: [
                    //{
                    //    dataField: 'CompanyId',
                    //    caption: 'Company',
                    //    validationRules: [{ type: 'required' }],
                    //    lookup: {
                    //        dataSou");
            WriteLiteral(@"rce: companies,
                    //        displayExpr: 'CompanyName',
                    //        valueExpr: 'CompanyId',
                    //    },
                    //},
                    {
                        dataField: 'ClientId',
                        caption: 'Client',
                        validationRules: [{ type: 'required' }],
                        lookup: {
                            dataSource: clients,
                            displayExpr: 'ClientName',
                            valueExpr: 'ClientId',
                        },
                    },
                    {
                        dataField: ""ClientName"",
                        validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: ""Email"",
                        validationRules: [{ type: 'email', message: 'Email is invalid' }]
                    },
                    //{
                    //    dataField: ""Re");
            WriteLiteral(@"ference""
                    //},
                    {
                        dataField: ""Phone""
                    },
                    {
                        dataField: ""Landline""
                    },
                    {
                        dataField: ""Whatsapp""
                    },
                    {
                        dataField: ""CreatedAt"",
                        visible: false,
                        allowEditing: false
                    }],

                toolbar: {
                    items: [
                        {
                            name: 'addRowButton',
                            showText: 'always',
                            options: {
                                text: 'Add New Sub-Client',
                                type: 'default',
                            },
                        },

                    ],
                },

                onRowInserted: function (e) {
                    var model = e");
            WriteLiteral(@".data;
                    model.CompanyId = CompanyID;
                    $.post('/Admin/AddSubClient', { model, model }, function (data) {
                        console.log(data);
                        if (data) {
                            toastr.success('Add Successfully');
                            getsubClients();
                        }
                    });
                },
                onRowUpdated: function (e) {
                    var model = e.data;
                    console.log(model, ""modEl"");
                    $.post('/Admin/UpdateSubClient', { model, model }, function (data) {
                        console.log(data);
                        if (data) {
                            toastr.success('Update Successfully');
                            getsubClients();

                        }
                    });
                },
            });
        });

    }

      function AddClienT() {
           var d = document.getElementById('clie");
            WriteLiteral(@"ntForm');
         //if (d.checkValidity()) {
           var formdata = new FormData($('#clientForm')[0]);
           formdata.append('f', documnetsor);
           formdata.append('CompanyId', CompanyID);

                 $.ajax({
                     type: 'POST',
                     url: '");
            Write(
#nullable restore
#line 387 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Admin\Clients.cshtml"
                            Url.Action("AddClientNew", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"',
                     data: formdata,
                     processData: false,
                     contentType: false,
                     success: function (data) {
                          toastr.success('Client Detail Saved');
                         setTimeout(function () {
                             window.location.reload();
                         }.bind(this), 4000);
                     }
                 });
       // }
         //checkValidations();
    }


    function getClientByID(iD) {

        $.get('/Admin/GetClient?id=' + iD, function (data) {
            clieNt = data;
            console.log(clieNt, 'clienTT');

            $('#ClientId').val(clieNt.ClientId);
            $('#ClientName1').val(clieNt.ClientName);
            $('#Email1').val(clieNt.Email);
            $('#Landline1').val(clieNt.Landline);
            $('#ContactPerson1').val(clieNt.ContactPerson);
            $('#UAddress1').val(clieNt.Address1);
            $('#UAddress2').val(clieNt.Ad");
            WriteLiteral(@"dress2);
            $('#UAddress3').val(clieNt.Address3);
            $('#CompanyId').val(clieNt.CompanyId);
            $('#Reference1').val(clieNt.Reference);
            $('#RefrenceAlias1').val(clieNt.RefrenceAlias);
            $('#TRN1').val(clieNt.TRN);
             $('#CreatedBy').val(clieNt.CreatedBy);

            $.get('/Admin/GetAllRegionList', function (daTa) {
            console.log(clieNt.RegionId, 'RegioNID');

                $('#products-data-source').dxSelectBox({
                    dataSource: new DevExpress.data.ArrayStore({
                        data: daTa,
                        key: 'RegionId',
                    }),
                    elementAttr: { class: ""dxSelect_Box"" },
                    displayExpr: 'Name',
                    name: 'RegionId',
                    valueExpr: 'RegionId',
                    value: clieNt.RegionId,
                });

            });


            $.get('/Admin/GetCountriesName', function (data) {
             ");
            WriteLiteral(@"   countriEs = data;

                $('#country').dxSelectBox({
                    items: countriEs,
                    name: ""Country"",
                    value: clieNt.Country,
                    elementAttr: { class: ""dxSelect_Box"" },
                    searchEnabled: true,
                    showClearButton: true
                });

            });



        });

        $(""#updateModal"").modal();
    }

</script>

<style>
    .select2-container {
        width : 100% !important;
    }
    .tab_head_back {
        background: #00000008 !important;
    }

    .select2-container .select2-selection--single {
        height: 47px !important;
    }

    .select2-container--default .select2-selection--single .select2-selection__rendered {
        line-height: 40px !important;
    }

    .select2-container--default .select2-selection--single .select2-selection__arrow {
        height: 40px !important;
    }

    .dxSelect_Box {
        height: 47% !important;");
            WriteLiteral(@"
        border: 1px solid #b5b5b5 !important;
    }
</style>
 
<ul class=""nav nav-tabs tab_head_back"" id=""myTab"" role=""tablist"">
    <li class=""nav-item"">
        <a class=""nav-link active"" id=""clients-tab"" data-toggle=""tab"" href=""#clients"" role=""tab"" aria-controls=""clients"" aria-selected=""true"">Clients</a>
    </li>
    <li class=""nav-item"">
        <a class=""nav-link"" id=""subclients-tab"" data-toggle=""tab"" href=""#subclients"" role=""tab"" aria-controls=""subclients"" aria-selected=""false"">Sub Clients</a>
    </li>
</ul>

<div class=""tab-content"" id=""myTabContent"">
    <div class=""tab-pane fade show active"" id=""clients"" role=""tabpanel"" aria-labelledby=""clients-tab"">

        <div class=""row"">
            <div class=""col-12"">
                <div class=""card"">
                    <div class=""card-body"">
                        <h4 class=""card-title""> Clients</h4>  

                        <div class=""row"">
                            <div class=""col-md-12""> 
                               ");
            WriteLiteral(" <div id=\"gridContainer\"></div>\r\n                            </div>\r\n                        </div>\r\n\r\n");
            WriteLiteral(@"                    </div>
                </div>
            </div>
        </div>

    </div>

    <div class=""tab-pane fade"" id=""subclients"" role=""tabpanel"" aria-labelledby=""subclients-tab"">

        <div class=""row"">
            <div class=""col-12"">
                <div class=""card"">
                    <div class=""card-body"">
                        <h4 class=""card-title""> Sub-Clients</h4>

                        <div id=""gridContainer2""></div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<!-- Create Client Modal -->

<div class=""modal fade bd-example-modal-lg"" id=""createModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Add New Client</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</bu");
            WriteLiteral(@"tton>
            </div>
            <div class=""modal-body"">

                <div class=""row"">
                    <div class=""col-12"">
                        <div class=""card"">
                            <div class=""card-body"">

                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8c6ae8d202b17b925ff5cb3139ac4dea26cb3d276d8cff123d2ebe1f4a0388b424493", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_0.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-info mr-2"" id=""btnSubmit"" onclick=""AddClienT()"">Save</button>
                <button type=""button"" class=""btn btn-dark btn-fw"" data-dismiss=""modal"">Close</button>
            </div>
        </div>

    </div>
</div>

<!-- Update Client Modal -->

<div class=""modal fade bd-example-modal-lg"" id=""updateModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Update Client</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>
            <div class=""modal-body"">

                <div class=""row"">
                    <");
            WriteLiteral("div class=\"col-12\">\r\n                        <div class=\"card\">\r\n                            <div class=\"card-body\">\r\n\r\n                                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("partial", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "8c6ae8d202b17b925ff5cb3139ac4dea26cb3d276d8cff123d2ebe1f4a0388b426898", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.PartialTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_PartialTagHelper.Name = (string)__tagHelperAttribute_1.Value;
            __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-info mr-2"" id=""btnUpdate"" onclick=""UpdateClient()"">Update</button>
                <button type=""button"" class=""btn btn-dark btn-fw"" data-dismiss=""modal"">Close</button>
            </div>
        </div>

    </div>
</div>
");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
