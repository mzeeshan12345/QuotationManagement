#pragma checksum "C:\Softwares\Quotation_Management\Quotation_Management\Views\Shared\_Menubar.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "a94f2fdfcbb0739ee100ae5b12a7fd656a1c4160b9bef14a1b039cdd07076e00"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Shared__Menubar), @"mvc.1.0.view", @"/Views/Shared/_Menubar.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management

#nullable disable
    ;
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management.Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#nullable disable
    ;
#nullable restore
#line 5 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

#nullable disable
    ;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"a94f2fdfcbb0739ee100ae5b12a7fd656a1c4160b9bef14a1b039cdd07076e00", @"/Views/Shared/_Menubar.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"e5aa15149a6f814aca9c9febb58b8d5784979381ee3c7539cba075d77e91d2ea", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    internal sealed class Views_Shared__Menubar : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"  
<style>
    .submenu_ico {
        margin-left: -1rem !important;
        padding: 0px 10px 0px 0px;
    }
    .nav-link2 {
        color: #736d63;
        font-size: 18px;
        line-height: 3;
    }
</style>
<script>
    var authPages;
     var roles;
    var menu;
 
     $(function () {
         GetPagesByRole();
     }); 
    function GetPagesByRole() {

                //****Get Current User with roles*****
         $.get('");
            Write(
#nullable restore
#line 24 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Shared\_Menubar.cshtml"
                 Url.Action("CurrentUserList", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\', function (data) {\r\n             roles = data;\r\n               console.log(roles.result, \"result roLes\");\r\n\r\n             // **** Get All Assigned Pages By Role ***\r\n            $.post(\'");
            Write(
#nullable restore
#line 29 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Shared\_Menubar.cshtml"
                     Url.Action("GetPagePermission", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', { role: roles.result }, function (data) {
                menu = data;

                // **** Prevent duplicates ***
                authPages = menu.reduce((unique, o) => {
                     if (!unique.some(obj => obj.PageName === o.PageName)) {
                         unique.push(o);
                     }
                     return unique;
                }, []);

                console.log(authPages, ""AythPages before"");
                myfunction(authPages);

                var result = """";

                // **** select without Edit Screens ****
                authPages = authPages.filter(function (el) { return !el.PageName.includes(""Update"") && !el.PageName.includes(""Add"") && !el.PageName.includes(""View Report"") && !el.PageType.includes(""Method"") && !el.PageType.includes(""Flow"") && !el.PageType.includes(""View""); });
                //authPages = authPages.filter(function (el) { return !el.PageName.includes(""Update"") || !el.PageName.includes(""Add""); });

              ");
            WriteLiteral(@"  // **** select only user pages with dropdown selection from MenuList ****
                var roleSubMenu = authPages.filter(n => n.PageType == ""User"");

                // **** select only quotation pages with dropdown selection from MenuList ****
                var qouoteSubMenu = authPages.filter(n => n.PageType == ""QuotationItem"");

                  // *** Stop duplicates in child and parent navbar items ***
                authPages = authPages.filter(item => !roleSubMenu.includes(item) && !qouoteSubMenu.includes(item));

                console.log(authPages, ""pagEs"");
                  // *** Simple navbar selection ****
                 for (var p = 0; p < authPages.length; p++) {

                     if (authPages.length > 0) {
                          result += '<li class=""nav-item""> <a class=""nav-link"" href=""' + authPages[p].PageUrl + '""><span class=""menu-title"">' + authPages[p].PageName + '</span> <i class=""mdi ' + authPages[p].Icon + ' menu-icon""></i></a></li>';
             ");
            WriteLiteral(@"         }
                  }

                  if (roleSubMenu.length > 0) {
                      result += '<li class=""nav-item""><a class=""nav-link"" data-toggle=""collapse"" href=""#ui-basic"" aria-expanded=""false"" aria-controls=""ui-basic""><span class=""menu-title"">User Management</span><i class=""menu-arrow""></i> <i class=""mdi mdi-account-settings menu-icon""></i> </a> <div class=""collapse"" id=""ui-basic""><ul class=""nav flex-column sub-menu"">  <li class=""nav-item""> ';
                     for (var i = 0; i < roleSubMenu.length; i++) {
                          result += ' <a class=""nav-link"" href=""' + roleSubMenu[i].PageUrl + '"">  <i class=""mdi ' + roleSubMenu[i].Icon + ' menu-icon submenu_ico""></i> ' + roleSubMenu[i].PageName + '  </a>';
                     }
                     result += '</li></ul></div></li> ';
                       //$('#resUlT').append(result);
                }
                if (qouoteSubMenu.length > 0) {
                      result += '<li class=""nav-item""><a class=""n");
            WriteLiteral(@"av-link"" data-toggle=""collapse"" href=""#ui-basic1"" aria-expanded=""false"" aria-controls=""ui-basic1""><span class=""menu-title"">Quotation Items</span><i class=""menu-arrow""></i> <i class=""mdi mdi-file menu-icon""></i> </a> <div class=""collapse"" id=""ui-basic1""><ul class=""nav flex-column sub-menu"">  <li class=""nav-item""> ';
                    for (var i = 0; i < qouoteSubMenu.length; i++) {
                        result += ' <a class=""nav-link"" href=""' + qouoteSubMenu[i].PageUrl + '"">  <i class=""mdi ' + qouoteSubMenu[i].Icon + ' menu-icon submenu_ico""></i> ' + qouoteSubMenu[i].PageName + '  </a>';
                     }
                     result += '</li></ul></div></li> ';
                 }
                       $('#resUlT').html(result);


            });

         });
    }


    function myfunction(authPages) {
         var count = 0;
        for (var i = 0; i < authPages.length; i++) {
            var xdx = window.location.pathname;
             if (xdx == authPages[i].PageUrl && authPage");
            WriteLiteral(@"s[i].Read == true) {
                count++
                return authPages;
            }

        }
         if (count == 0) {
                 top.location.href = '/Admin/AccessDenied';
            }
        }
</script>


<nav class=""sidebar sidebar-offcanvas"" id=""sidebar"">
    <ul class=""nav"">

        <li class=""nav-item""> <a class=""nav-link"" href=""/""> <span class=""menu-title""> Admin Panel </span> <i class=""mdi mdi-account""></i></a></li>
");
            WriteLiteral("    </ul>\r\n</nav>\r\n");
            WriteLiteral("\r\n\r\n");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
