#pragma checksum "C:\Softwares\Quotation_Management\Quotation_Management\Views\Home\_DashboardAdmin.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "993c88f4477fce63b2add2f5f43263a44708718deeed3908be8db261f7222e7f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Home__DashboardAdmin), @"mvc.1.0.view", @"/Views/Home/_DashboardAdmin.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management

#nullable disable
    ;
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management.Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#nullable disable
    ;
#nullable restore
#line 5 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

#nullable disable
    ;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"993c88f4477fce63b2add2f5f43263a44708718deeed3908be8db261f7222e7f", @"/Views/Home/_DashboardAdmin.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"e5aa15149a6f814aca9c9febb58b8d5784979381ee3c7539cba075d77e91d2ea", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    internal sealed class Views_Home__DashboardAdmin : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Home\_DashboardAdmin.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable

            WriteLiteral(@"
<script>

    var clienTs;
    var quotdataCounT;
    var users;
    var approvequoTes;
    var emailquoTes;
    var isSuperadMin;
    var quoatationID
    var cliEnTID;
    var datasourceGrid;
    var dataSource;
    var dataSource1;
    var dataSource2;


    var quotdata = [];
    var quotes;
    var quotesDetail;
    var tc;
    var url = """";
    var cv = """";
    var date;

    var comp;
    var clients;
    var users;

    var fromDaTe;
    var toDaTe;

    var isFile;
    var comp1;
    var clients1;
    var users1;
    var xdx;
    var Pages;
    var repoRt;
    var userval;
    var getPages;
    var CompanyID;
    var tc;
    var types = ['area', 'stackedarea', 'fullstackedarea'];

    var Qstatus;
    var id;

    var dailyStates;
    var weeklYStates;
    var montThlyStates;
    var users = [];
    var quotationStatus = ['Proposal', 'Quotation', 'Waiting PO', 'PO Received', 'Invoiced', 'Cancelled'];

    window.jsPDF = window.jspdf.jsPDF;
    a");
            WriteLiteral(@"pplyPlugin(window.jsPDF);

    $(function () {
        CompanyID = localStorage.getItem('CompanyId');

        getPages = JSON.parse(localStorage.getItem('Pages'));
        Pages = getPages.find(dx => dx.PageName == ""Quotation"");

        if (Pages.Create == true) {
            $(""#createQuotation"").show();
        }
        else {
            $(""#createQuotation"").hide();
        }

        getUsers();
        getQuotestatus();
        getClienTs();
        getvisiTors();
        getQuotesCount();
        getQuotes();
        GetSentQuotes();
        GetApprovedQuotes();
        GetStaticsQuotes();
        getcharts();
        GetStaticsQuotesDaily();
        GetStaticsQuotesWeekly();
        GetStaticsQuotesMonthly();
    });


    function GetStaticsQuotesDaily() {
        $.get('/Home/GetDailyQuotationStatics?companyId=' + CompanyID, function (data) {
            dailyStates = data;
             Quotationgrid1(dailyStates);
        });
   }
    function Quotationgrid1(");
            WriteLiteral(@"dailyStates) {
        $('#gridContainer1').dxDataGrid({
            dataSource: dailyStates,
            columns: ['Status', 'Count'],
            showBorders: true,
        });
    }

    function GetStaticsQuotesWeekly() {
        $.get('/Home/GetWeeklyQuotationStatics?companyId=' + CompanyID, function (data) {
            weeklYStates = data;
             Quotationgrid2(weeklYStates);
        });
    }

    function Quotationgrid2(weeklYStates) {
        $('#gridContainer2').dxDataGrid({
            dataSource: weeklYStates,
            columns: ['Status', 'Count'],
            showBorders: true,
        });
    }

    function GetStaticsQuotesMonthly() {
        $.get('/Home/GetMonthlyQuotationStatics?companyId=' + CompanyID, function (data) {
            montThlyStates = data;
             Quotationgrid3(montThlyStates);
        });
   }

    function Quotationgrid3(montThlyStates) {
        $('#gridContainer3').dxDataGrid({
            dataSource: montThlyStates,
      ");
            WriteLiteral(@"      columns: ['Status', 'Count'],
            showBorders: true,
        });
    }



    function getQuotesCount() {
        $.get('/Home/GetQuotations', function (data) {
            quotdataCounT = data;
            $('#quoTeCount').html(quotdataCounT);
        });
    }

    function getClienTs() {
        $.get('/Home/GetClients', function (data) {
            clienTs = data;
            $('#ClienTsCount').html(clienTs);
        });
    }
    function getvisiTors() {
        $.get('/Home/GetUsers', function (data) {
            users = data;
            $('#usersCount').html(users);
        });
    }

    function GetApprovedQuotes() {
        $.get('/Home/GetApprovedQuotations', function (data) {
            approvequoTes = data;
            $('#approveDQuotesCount').html(approvequoTes);
        });
    }

    function GetSentQuotes() {
        $.get('/Home/GetSentQuotations', function (data) {
            emailquoTes = data;
            $('#SentQuotesCount').html(");
            WriteLiteral(@"emailquoTes);
        });
    }

    function GetStaticsQuotes() {
        $.get('/Home/GetQuotationstatics?companyID=' + CompanyID, function (data) {
            dataSource = data;
 
            $('#chart').dxChart({
                dataSource,
                palette: 'soft',
                title: {
                    text: 'Discount Statics',
                    //subtitle: 'as of January 2017',
                },
                commonSeriesSettings: {
                    type: 'bar',
                    barPadding: 0.5,
                    valueField: 'Count',
                    argumentField: 'Status',
                    ignoreEmptyPoints: true,
                    label: {
                        visible: true, 
                    },
                },
                seriesTemplate: {
                    nameField: 'Status',
                },
            });
        });
    }

    function getData() {
        fromDaTe = document.getElementById(""fromDate"").value;");
            WriteLiteral(@"
        toDaTe = document.getElementById(""toDate"").value;
        User = document.getElementById(""toDate"").value;

        $.get('/Home/GetStaticsByFilter?From=' + fromDaTe, ""&To="" + toDaTe, ""&uId="" + User, function (data) {
            dataSource2 = data;
            console.log(dataSource2, ""D2"");

           //$('#charTStatic').dxPieChart({
           //     size: {
           //         width: 500,
           //     },
           //     palette: 'bright',
           //     dataSource2,
           //     series: [
           //         {
           //             argumentField: 'QuotationStatus',
           //             valueField: 'Count',
           //             label: {
           //                 visible: true,
           //                 connector: {
           //                     visible: true,
           //                     width: 1,
           //                 },
           //             },
           //         },
           //     ],
           //     /");
            WriteLiteral(@"/title: 'Quotation Statics',
           //     export: {
           //         enabled: true,
           //     },
           //     onPointClick(e) {
           //         const point = e.target;

           //         toggleVisibility(point);
           //     },
           //     onLegendClick(e) {
           //         const arg = e.target;

           //         toggleVisibility(this.getAllSeries()[0].getPointsByArg(arg)[0]);
           //     },
           // });

           // function toggleVisibility(item) {
           //     if (item.isVisible()) {
           //         item.hide();
           //     } else {
           //         item.show();
           //     }
           // }

        });
    }

        function getQuotes() {
        $.get('/Home/GetQuotationLists', function (data) {
            quotdata = data;
            Quotationgrid(quotdata);
        });
    }

       function getHQuotes() {

        //****Get Current User with roles*****
        $.get('");
            Write(
#nullable restore
#line 263 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Home\_DashboardAdmin.cshtml"
                Url.Action("CurrentUserList", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', function (data) {
            roles = data;
            console.log(roles.result, ""result roLes"");

        });
    }


    function getQuotestatus() {
        $('#QStatus').dxSelectBox({
            items: quotationStatus, 
            name: ""QuotationStatus"",
            searchEnabled: true, 
            showClearButton: true,
            elementAttr: {
                class: ""dropDownCss""
            },
            onValueChanged(data) {
                console.log(data, 'DaTa');
                Qstatus = data.value
                getcharts(id, Qstatus);
            }
        }); 
    }

    function getUsers() {
        $.get('/User/GetUsers?companyId=' + CompanyID, function (data) {
            users = data;

            $('#UserDropdown').dxSelectBox({
                dataSource: new DevExpress.data.ArrayStore({
                    data: users,
                    key: 'Id',
                }),
                displayExpr: 'Name',
                valueExpr: 'Id',
");
            WriteLiteral(@"                elementAttr: {
                    class: ""dropDownCss""
                },
                searchEnabled: true,
                showClearButton: true,
                onValueChanged(data) {
                    id = data.value
                    getcharts(id, Qstatus);

                }
            });
        });

    }

    function getcharts(id, Qstatus) {
       
        $.get('/Home/GetQuotationstatics?companyID=' + CompanyID, function (data) {
            dataSource = data;

            fromDaTe = document.getElementById(""fromDate"").value;
            toDaTe = document.getElementById(""toDate"").value;
             
 
            $.get('/Home/GetStaticsByFilter?From=' + fromDaTe + ""&To="" + toDaTe + ""&uId="" + id + ""&companyId="" + CompanyID + ""&status="" + Qstatus , function (data) {
            //$.get('/Home/GetStaticsByDateFilter?From=' + fromDaTe + ""&To="" + toDaTe + ""&uId="" + id + ""&companyId="" + CompanyID + ""&status="" + Qstatus , function (data) {
             ");
            WriteLiteral(@"       dataSource = data;
                    $('#charTStatic').dxPieChart({
                        palette: 'ocean',
                        dataSource,
                        type: 'doughnut',
                        title: {
                            text: 'Quotation Statics',
                            subtitle: {
                                //text: '(billion US$, 2012)',
                            },
                        },
                        size: {
                            height: 530
                        },
                        legend: {
                            visible: true,
                        },
                        innerRadius: 0.2,
                        commonSeriesSettings: {
                            label: {
                                visible: false,
                            },
                        },
                        tooltip: {
                            enabled: true,
                            customizeTo");
            WriteLiteral(@"oltip() {
                                if (this.seriesName == ""Total"") {
                                    return { text: `${this.argumentText}<br>${this.seriesName}: ${this.valueText}AED` };
                                }

                                if (this.seriesName == ""Count"") {
                                    return { text: `${this.argumentText}<br>${this.seriesName}: ${this.valueText}` };
                                }
                            },
                        },
                        export: {
                            enabled: true,
                        },

                        series: [{
                            name: 'Count',
                            argumentField: 'Status',
                            valueField: 'Count',
                            //label: {
                            //    visible: true,
                            //    position: 'inside',
                            //    //customizeText(arg) {
          ");
            WriteLiteral(@"                  //    //    return `Count:${arg.argumentText} ${this.valueText})`;
                            //    //},
                            //},

                        }, {
                            name: 'Total',
                            argumentField: 'Status',
                            valueField: 'Total',
                            label: {
                                visible: true,
                                position: 'inside',
                                //connector: {
                                //    visible: true,
                                //},
                                customizeText(arg) {
                                    return `${arg.argumentText} ${arg.valueText}`;
                                },
                            },
                        }],
                    });
                    datasourceGrid = new Array();
                    for (var i = 0; i < dataSource.length; i++) {
                        if ");
            WriteLiteral(@"(dataSource[i].Quotations.length > 0) {
                            datasourceGrid.push.apply(datasourceGrid, dataSource[i].Quotations);
                        }
                    }

                    console.log(datasourceGrid, 'dataSource');
                    SalesQuotationDetailgrid(datasourceGrid);

                });
            
        });
    }

    //$('#chart').dxChart({
    //    dataSource,
    //    commonSeriesSettings: {
    //        argumentField: 'Status',
    //        type: 'bar',
    //        hoverMode: 'allArgumentPoints',
    //        selectionMode: 'allArgumentPoints',
    //        label: {
    //            visible: true,
    //            format: {
    //                type: 'fixedPoint',
    //                precision: 0,
    //            },
    //        },
    //    },
    //    series: [
    //        { valueField: 'Count', name: 'Status' },
    //    ],
    //    title: 'Quotation Status',
    //    legend: {
    //        verticalA");
            WriteLiteral(@"lignment: 'bottom',
    //        horizontalAlignment: 'center',
    //    },
    //    export: {
    //        enabled: true,
    //    },
    //    onPointClick(e) {
    //        e.target.select();
    //    },
    //});


    function SalesQuotationDetailgrid(datasourceGrid) {
        $.get('/Company/GetActiveCompanies?cmpID=' + CompanyID, function (data) {
            comp = data;

            $.get('/Admin/GetAllClients?cmpID=' + CompanyID, function (data) {
                clients = data;

                $.get('/User/GetUsers?companyId=' + CompanyID, function (data) {
                    users = data;



                    const dataGrid = $(""#gridContainerSales"").dxDataGrid({
                        dataSource: datasourceGrid,
                        keyExpr: ""QuotationId"",
                        showBorders: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnHidingEnabled: true,
      ");
            WriteLiteral(@"                  hoverStateEnabled: true,
                        rowAlternationEnabled: true,
                         paging: {
                            pageSize: 12
                        },
                        pager: {
                            visible: true,
                            allowedPageSizes: [5, 10, 'all'],
                            showPageSizeSelector: true,
                            showInfo: true,
                            showNavigationButtons: true,
                        },
                        columnsAutoWidth: true,
                        showBorders: true,
                        filterRow: {
                            visible: true,
                            applyFilter: ""auto""
                        },
                        searchPanel: {
                            visible: true,
                            placeholder: ""Search...""
                        },
                        //export: {
                        //    enable");
            WriteLiteral(@"d: true,
                        //},
                        //onExporting: function (e) {
                        //    e.fileName = ""Quotation List""

                        //},
                        headerFilter: {
                            visible: true
                        },
                        columns: [

                            {
                                dataField: 'CompanyId',
                                caption: 'Company',
                                lookup: {
                                    dataSource: comp,
                                    displayExpr: 'CompanyName',
                                    valueExpr: 'CompanyId',
                                },
                            },
                            {
                                dataField: ""CreatedAt"",
                                caption: 'Created Date',
                                dataType: ""datetime"",
                                format: ""dd/MMM/yyyy");
            WriteLiteral(@""",
                                allowEditing: false
                            },
                            {
                                dataField: 'ClientId',
                                caption: 'Client',
                                lookup: {
                                    dataSource: clients,
                                    displayExpr: 'ClientName',
                                    valueExpr: 'ClientId',
                                },
                            },
                            {
                                dataField: 'UserId',
                                caption: 'User',
                                lookup: {
                                    dataSource: users,
                                    displayExpr: 'Name',
                                    valueExpr: 'Id',
                                },
                            },
                            {
                                dataField: ""QuotationStatu");
            WriteLiteral(@"s""
                            },
                            {
                                dataField: ""Total"",
                                caption: ""Items Total""
                            }],
                        toolbar: {
                            items: [
                                 {
                                    widget: 'dxButton',
                                    location: 'after',
                                    options: {
                                        icon: 'exportxlsx',
                                        text: 'Export to Excel',
                                        onClick() {
                                            const workbook = new ExcelJS.Workbook();
                                            const worksheet = workbook.addWorksheet('Quotation Detail');

                                            DevExpress.excelExporter.exportDataGrid({
                                                component: dataGrid,
             ");
            WriteLiteral(@"                                   worksheet,
                                                autoFilterEnabled: true,
                                            }).then(() => {
                                                workbook.xlsx.writeBuffer().then((buffer) => {
                                                    saveAs(new Blob([buffer], { type: 'application/octet-stream' }), 'QuotationList.xlsx');
                                                });
                                            });
                                         },
                                    },
                                },
                                {
                                    widget: 'dxButton',
                                    location: 'after',
                                    options: {
                                        icon: 'exportpdf',
                                        text: 'Export to PDF',
                                        onClick() {
         ");
            WriteLiteral(@"                                   const doc = new jsPDF();
                                            DevExpress.pdfExporter.exportDataGrid({
                                                jsPDFDocument: doc,
                                                component: dataGrid,
                                            }).then(() => {
                                                doc.save('QuotationDetail.pdf');
                                            });
                                        },
                                    },
                                },
                                'searchPanel',
                            ],
                        },
                    }).dxDataGrid('instance');

                });
            });
        });
    }

    function Quotationgrid(quotdata) {
        $.get('/Company/GetActiveCompanies?cmpID=' + CompanyID, function (data) {
            comp = data;
            
            $.get('/Admin/GetAllClients?cmpID=");
            WriteLiteral(@"' + CompanyID, function (data) {
                clients = data;

                $.get('/User/GetUsers?companyId=' + CompanyID, function (data) {
                    users = data;


                    const isChief = function (position) {
                        //return position && position == true;
                        return position && ['Approved'].indexOf(position.trim()) >= 0;
                    };


                    $(""#gridContainer"").dxDataGrid({
                        dataSource: quotdata,
                        keyExpr: ""QuotationId"",
                        showBorders: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnHidingEnabled: true,
                        hoverStateEnabled: true,
                        paging: {
                            pageSize: 12
                        },
                        pager: {
                            visible: true,
                ");
            WriteLiteral(@"            allowedPageSizes: [5, 10, 'all'],
                            showPageSizeSelector: true,
                            showInfo: true,
                            showNavigationButtons: true,
                        },
                        editing: {
                            mode: 'row',
                            allowUpdating(e) {
                                if (Pages.Update == true) {
                                    return e;
                                }
                            },
                            useIcons: true
                        },
                        columnsAutoWidth: true,
                        showBorders: true,
                        filterRow: {
                            visible: true,
                            applyFilter: ""auto""
                        },
                        searchPanel: {
                            visible: true,
                            placeholder: ""Search...""
                        },");
            WriteLiteral(@"
                        export: {
                            enabled: true,
                        },
                        onExporting: function (e) {
                            e.fileName = ""Quotation List""
                        },
                        headerFilter: {
                            visible: true
                        },
                        columns: [

                            {
                                dataField: 'CompanyId',
                                caption: 'Company',
                                lookup: {
                                    dataSource: comp,
                                    displayExpr: 'CompanyName',
                                    valueExpr: 'CompanyId',
                                },
                            },
                            {
                                dataField: ""CreatedAt"",
                                caption: 'Created Date',
                                dataType: ""dat");
            WriteLiteral(@"etime"",
                                format: ""dd/MMM/yyyy"",
                                allowEditing: false
                            },
                            {
                                dataField: 'ClientId',
                                caption: 'Client',
                                lookup: {
                                    dataSource: clients,
                                    displayExpr: 'ClientName',
                                    valueExpr: 'ClientId',
                                },
                            },
                            {
                                dataField: 'UserId',
                                caption: 'User',
                                lookup: {
                                    dataSource: users,
                                    displayExpr: 'Name',
                                    valueExpr: 'Id',
                                },
                            },
                            ");
            WriteLiteral(@"{
                                dataField: ""Status""
                            },
                            //{
                            //    dataField: ""EmailStatus"",
                            //    dataTtpe: ""boolean"",
                            //    width: 140
                            //},
                            {
                                type: ""buttons"",
                                buttons: [""edit"", ""Send"",
                                    {
                                        hint: ""View Report and Send Email"",
                                        icon: ""exportpdf"",
                                        visible: function (e) {
                                            var repoRt = getPages.find(dx => dx.PageName == ""View Report"");
                                            if (repoRt && repoRt.Read == true) {
                                                return e;
                                            }
                            ");
            WriteLiteral(@"                else {
                                                return e.column.visible = false;
                                            }
                                        },
                                        onClick: function (e) {
                                            $(""#btn_email"").hide();
                                            $(""#myModal"").modal();

                                            var compID = e.row.data.CompanyId;
                                            var clientID = e.row.data.ClientId;
                                            var quoteId = e.row.data.QuotationId;
                                            //$.get('/Report/ViewReport?Id=' + compID + '&cId=' + clientID, function (data) {
                                            $.get('/Report/ViewReport?Id=' + compID + '&cId=' + clientID + '&quoteID=' + quoteId, function (data) {
                                                $('#repotdata').html(data);
                          ");
            WriteLiteral(@"                      setTimeout(function () {
                                                    $(""#load"").hide();
                                                    $(""#btn_email"").show();
                                                }, 1000);
                                            });

                                            cliEnTID = e.row.data.ClientId;
                                            quoatationID = e.row.data.QuotationId;
                                        },

                                    },
                                    {
                                        hint: ""View History"",
                                        icon: ""mdi mdi-history"",
                                        visible: function (e) {
                                            var hisTorY = getPages.find(dx => dx.PageName == ""Quotation History"");
                                            console.log(repoRt, 'rePorT');
                                            i");
            WriteLiteral(@"f (hisTorY && hisTorY.Read == true) {
                                                return e;
                                            }
                                            else {
                                                return e.column.visible = false;
                                            }
                                        },
                                        onClick: function (e) {
                                            $(""#historyModal"").modal();
                                            getHQuotes();
                                            var dxdx = roles.result.filter(r => r.RoleName == 'SuperAdmin' || r.RoleName == 'Manager');
                                            console.log(dxdx.length, ""dxsdx"");
                                            if (dxdx.length > 0) {
                                                $.get('/Quotation/GetAllHQuotations?iD=' + e.row.data.QuotationId, function (data) {
                                      ");
            WriteLiteral(@"              quotHdata = data;
                                                    console.log(quotHdata, ""quoTHistorYALL"")
                                                    QuotationHgrid(quotHdata);
                                                });
                                            }
                                            else {
                                                $.get('/Quotation/GetQuotationss?id=' + e.row.data.QuotationId, function (data) {
                                                    quotHdata = data;
                                                    console.log(quotHdata, ""quoTHistorYbyUser"")
                                                    QuotationHgrid(quotHdata);
                                                });
                                            }


                                        }
                                    }]
                            }],
                        masterDetail: {
                         ");
            WriteLiteral(@"   enabled: true,
                            template: function (container, options) {
                                $.get('/Quotation/GetItemLists', function (data) {
                                    quotesDetail = data;

                                    $('<div>')
                                    $(""<div>"")
                                        .dxDataGrid({
                                            columnAutoWidth: true,
                                            showBorders: true,
                                            filterRow: {
                                                visible: true,
                                                applyFilter: ""auto""
                                            },
                                            searchPanel: {
                                                visible: true,
                                                width: 240,
                                                placeholder: ""Search...""
         ");
            WriteLiteral(@"                                   },
                                            headerFilter: {
                                                visible: true
                                            },
                                            columns: [
                                                {
                                                    dataField: ""MasterDetailId"",
                                                    caption: 'No',
                                                    allowEditing: false
                                                },

                                                {
                                                    dataField: 'MasterId',
                                                    caption: 'Description',
                                                    lookup: {
                                                        dataSource: quotesDetail,
                                                        displayExpr: 'Item',
 ");
            WriteLiteral(@"                                                       valueExpr: 'MasterId',
                                                    },
                                                },

                                                {
                                                    dataField: ""Price"",
                                                    allowEditing: false
                                                },
                                                {
                                                    dataField: ""Quantity"",
                                                    caption: 'Qty'
                                                },
                                                {
                                                    dataField: ""Payable"",
                                                    allowEditing: false,
                                                    //dataType: ""number"",
                                                    caption: 'To");
            WriteLiteral(@"tal Amount Payable',
                                                    type: ""fixedPoint"",
                                                    precision: 2,
                                                    calculateCellValue(rowData) {
                                                        return rowData.Payable = rowData.Quantity * rowData.Price;
                                                    },
                                                }],
                                            summary: {
                                                totalItems: [{
                                                    column: 'Payable',
                                                    summaryType: 'sum'
                                                }],
                                            },
                                            dataSource: new DevExpress.data.DataSource({
                                                store: new DevExpress.data.ArrayStore({
          ");
            WriteLiteral(@"                                          data: options.data.Master_Detail_Tables
                                                }),
                                            })
                                        }).appendTo(container);
                                });
                            }
                        },

                        //onToolbarPreparing: function (e) {
                        //    var dataGrid = e.component;
                        //    e.toolbarOptions.items.unshift({
                        //        location: ""after"",
                        //        widget: ""dxButton"",
                        //        options: {
                        //            icon: ""add"",
                        //            onClick: function () {
                        //                top.location.href = '/Quotation/CreateQuotation';
                        //            }
                        //        }
                        //    });
                 ");
            WriteLiteral(@"       //},
                        onEditingStart: function (e) {
                            var quoTatiOn = e.data.QuotationId;
                            top.location.href = '/Quotation/UpdateQuotation?id=' + quoTatiOn;
                        }
                    });

                });
            });
        });
    }


    function QuotationHgrid(quotHdata) {
        $.get('/Company/GetActiveCompanies?cmpID=' + CompanyID, function (data) {
            comp1 = data;

            $.get('/Admin/GetAllClients?cmpID=' + CompanyID, function (data) {
                clients1 = data;

                $.get('/User/GetUsers?companyId=' + CompanyID, function (data) {
                    users1 = data;

                    $(""#gridHContainer"").dxDataGrid({
                        dataSource: quotHdata,
                        //keyExpr: ""QuotationHistoryId"",
                        showBorders: true,
                        columnAutoWidth: true,
                        allowColumnR");
            WriteLiteral(@"esizing: true,
                        columnHidingEnabled: true,
                        hoverStateEnabled: true,
                        paging: {
                            pageSize: 8
                        },
                        pager: {
                            visible: true,
                            allowedPageSizes: [5, 16, 30, 'all'],
                            showPageSizeSelector: true,
                            showInfo: true,
                            showNavigationButtons: true,
                        },
                        columnsAutoWidth: true,
                        showBorders: true,
                        filterRow: {
                            visible: true,
                            applyFilter: ""auto""
                        },
                        searchPanel: {
                            visible: true,
                            placeholder: ""Search...""
                        },
                        headerFilter: {
          ");
            WriteLiteral(@"                  visible: true
                        },
                        columns: [
                            {
                                dataField: ""QuotationId"",
                                caption: 'ID',
                                allowEditing: false
                            },
                            {
                                dataField: 'CompanyId',
                                caption: 'Company',
                                lookup: {
                                    dataSource: comp1,
                                    displayExpr: 'CompanyName',
                                    valueExpr: 'CompanyId',
                                },
                            },
                            {
                                dataField: 'ClientId',
                                caption: 'Client',
                                lookup: {
                                    dataSource: clients1,
                             ");
            WriteLiteral(@"       displayExpr: 'ClientName',
                                    valueExpr: 'ClientId',
                                },
                            },

                            {
                                dataField: ""CreatedAt"",
                                caption: 'Created Date',
                                dataType: ""datetime"",
                                format: ""dd/MMM/yyyy"",
                                allowEditing: false
                            },
                            {
                                dataField: 'CreatedBy',
                                caption: 'Created By',
                                allowEditing: false,
                                lookup: {
                                    dataSource: users1,
                                    displayExpr: 'Name',
                                    valueExpr: 'Id',
                                },
                            },
                            {
        ");
            WriteLiteral(@"                        dataField: ""EditedAt"",
                                caption: 'Edit Date',
                                dataType: ""datetime"",
                                format: ""dd/MMM/yyyy"",
                                allowEditing: false
                            },
                            {
                                dataField: 'UserId',
                                caption: 'Updated By',
                                allowEditing: false,
                                lookup: {
                                    dataSource: users1,
                                    displayExpr: 'Name',
                                    valueExpr: 'Id',
                                },
                            },
                            {
                                dataField: ""QuotationStatus"",
                                caption: ""Status""
                            },
                            {
                                dataField:");
            WriteLiteral(@" ""Manager""
                            },
                            {
                                dataField: ""Admin""
                            },
                            {
                                dataField: ""Text"",
                                caption: ""Reason""
                            },
                            {
                                type: ""buttons"",
                                buttons: [""edit"",
                                    {
                                        hint: ""View"",
                                        icon: ""mdi mdi-eye"",
                                        visible: function (e) {
                                            var hisToryview = getPages.find(dx => dx.PageName == ""View Quotation History"");
                                            if (hisToryview && hisToryview.Read == true) {
                                                return e;
                                            }
                       ");
            WriteLiteral(@"                     else {
                                                return e.column.visible = false;
                                            }
                                        },
                                        onClick: function (e) {
                                            var quoTatiOn = e.row.data.QuotationId;
                                            console.log(quoTatiOn, ""iD"");
                                            top.location.href = '/Quotation/ViewQuotation?id=' + quoTatiOn;
                                        },
                                    }],
                            }],
                        masterDetail: {
                            enabled: true,
                            template: function (container, options) {
                                $.get('/Quotation/GetItemLists', function (data) {
                                    quotesDetail = data;
                                    console.log(quotesDetail);
        ");
            WriteLiteral(@"                            $('<div>')
                                    $(""<div>"")
                                        .dxDataGrid({
                                            columnAutoWidth: true,
                                            showBorders: true,
                                            filterRow: {
                                                visible: true,
                                                applyFilter: ""auto""
                                            },
                                            searchPanel: {
                                                visible: true,
                                                width: 240,
                                                placeholder: ""Search...""
                                            },
                                            headerFilter: {
                                                visible: true
                                            },
                               ");
            WriteLiteral(@"             columns: [
                                                {
                                                    dataField: 'MasterId',
                                                    caption: 'Description',
                                                    lookup: {
                                                        dataSource: quotesDetail,
                                                        displayExpr: 'Item',
                                                        valueExpr: 'MasterId',
                                                    },
                                                },

                                                {
                                                    dataField: ""Price"",
                                                    allowEditing: false
                                                },
                                                {
                                                    dataField: ""Quantity"",
     ");
            WriteLiteral(@"                                               caption: 'Qty'
                                                },
                                                {
                                                    dataField: ""Payable"",
                                                    allowEditing: false,
                                                    //dataType: ""number"",
                                                    caption: 'Total Amount Payable',
                                                    type: ""fixedPoint"",
                                                    precision: 2,
                                                    calculateCellValue(rowData) {
                                                        return rowData.Payable = rowData.Quantity * rowData.Price;
                                                    },
                                                },
                                                {
                                                  ");
            WriteLiteral(@"  dataField: ""CreatedAt"",
                                                    caption: 'Created Date',
                                                    dataType: ""datetime"",
                                                    format: ""dd/MMM/yyyy"",
                                                    allowEditing: false
                                                },
                                                {
                                                    dataField: ""EditedAt"",
                                                    caption: 'Edit Date',
                                                    dataType: ""datetime"",
                                                    format: ""dd/MMM/yyyy"",
                                                    allowEditing: false
                                                },
                                                {
                                                    dataField: ""EditedBy"",
                                      ");
            WriteLiteral(@"              caption: 'Updated By',
                                                    allowEditing: false
                                                }],
                                            summary: {
                                                totalItems: [{
                                                    column: 'Payable',
                                                    summaryType: 'sum'
                                                }],
                                            },
                                            dataSource: new DevExpress.data.DataSource({
                                                store: new DevExpress.data.ArrayStore({
                                                    data: options.data.QuotationHistoryDetails
                                                }),
                                            })
                                        }).appendTo(container);
                                });
                 ");
            WriteLiteral(@"           }
                        },
                    });

                });
            });
        });
    }


    function sendEmail() {

        $.get('/Admin/GetClient?id=' + cliEnTID, ""&companyId="" + CompanyID, function (data) {
            var custoMers = data;
            var model = {
                Email: custoMers.Email,
                ClientName: custoMers.ClientName,
                QuotationID: quoatationID
            }
            console.log(model, ""DaTa"");
            //$.post('/Admin/SubmitReport?email=' + custoMers.Email + '&QuotationID=' + quoatationID, function (data) {
            $.post('/Admin/SubmitReport', { model, model }, function (data) {
                console.log(data, ""daTa"");
                if (data.Success) {
                    toastr.success(data.Success);
                }
                else if (data.Message) {
                    toastr.warning(data.Message);
                }
            })
        });
    }
</script>

<st");
            WriteLiteral(@"yle>

    .dropDownCss {
        height: 45px !important;
        border: 1px solid #b2b2b2 !important;
    }
    .card_height {
        height: 150px !important;
    }

    .dxrd-image-fullscreen, .dxrd-toolbar-item-separator, .dxrd-image-print-page,
    .dxrd-image-search, .dxrd-tab-panel-right, .dxrd-preview-export-toolbar-item, .dxrd-toolbar-item-zoom {
        display: none !important;
    }

    .loader {
        position: relative;
        text-align: center;
        margin: 15px auto 35px auto;
        z-index: 9999;
        display: block;
        width: 80px;
        height: 80px;
        border: 10px solid rgba(0, 0, 0, .3);
        border-radius: 50%;
        border-top-color: #000;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }
</style>



<div class=""row"">

    <div class=""col-md-3 stretch-card grid-margin"">
        <div class=""card bg-gradient-danger card-img-holder text-white card_height"">
   ");
            WriteLiteral(@"         <div class=""card-body"">
                <img src=""/Web/assets/images/dashboard/circle.svg"" class=""card-img-absolute"" alt=""circle-image"" />
                <h4 class=""font-weight-normal mb-3"">
                    Quotations <i class=""mdi mdi-file-pdf mdi-24px float-right""></i>
                </h4>
                <h2 class=""mb-5"" id=""quoTeCount""></h2>
");
            WriteLiteral(@"            </div>
        </div>
    </div>
    <div class=""col-md-3 stretch-card grid-margin"">
        <div class=""card bg-gradient-info card-img-holder text-white card_height"">
            <div class=""card-body"">
                <img src=""/Web/assets/images/dashboard/circle.svg"" class=""card-img-absolute"" alt=""circle-image"" />
                <h4 class=""font-weight-normal mb-3"">
                    Clients  <i class=""mdi mdi-account-multiple mdi-24px float-right""></i>
                </h4>
                <h2 class=""mb-5"" id=""ClienTsCount""></h2>
                <h6 class=""card-text"">");
            WriteLiteral(@"</h6>
            </div>
        </div>
    </div>
    <div class=""col-md-3 stretch-card grid-margin"">
        <div class=""card bg-gradient-success card-img-holder text-white card_height"">
            <div class=""card-body"">
                <img src=""/Web/assets/images/dashboard/circle.svg"" class=""card-img-absolute"" alt=""circle-image"" />
                <h4 class=""font-weight-normal mb-3"">
                    Approved Quotations <i class=""mdi mdi-account-switch mdi-24px float-right""></i>
                </h4>
                <h2 class=""mb-5"" id=""approveDQuotesCount""></h2>
");
            WriteLiteral(@"            </div>
        </div>
    </div>

    <div class=""col-md-3 stretch-card grid-margin"">
        <div class=""card bg-gradient-success card-img-holder text-white card_height"">
            <div class=""card-body"">
                <img src=""/Web/assets/images/dashboard/circle.svg"" class=""card-img-absolute"" alt=""circle-image"" />
                <h4 class=""font-weight-normal mb-3"">
                    Sent <i class=""mdi mdi-account-switch mdi-24px float-right""></i>
                </h4>
                <h2 class=""mb-5"" id=""SentQuotesCount""></h2>
");
            WriteLiteral(@"            </div>
        </div>
    </div>


</div>



<div class=""row"">
    <div class=""col-md-12"">
        <div class=""card"">
            <div class=""card-header"">
                <h3 style=""display: inline-block;"">Quotation Statics</h3>
            </div>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <label> From Date <em class=""text-danger"">*</em></label>
                            <input type=""date"" id=""fromDate"" class=""form-control"" required>
                        </div>
                    </div>
                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <label>To Date <em class=""text-danger"">*</em></label>
                            <input type=""date"" id=""toDate"" class=""form-control"" onchange=""getcharts()"" required>
                        </div>
                    ");
            WriteLiteral(@"</div>

                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <label>Sales Rep. </label>
                            <div id=""UserDropdown""></div>
                        </div>
                    </div>
                    
                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <label>Status </label>
                            <div id=""QStatus""></div>
                        </div>
                    </div>
                </div>



                <div class=""row""> 
                    <div class=""col-md-12"">
                        <div id=""charTStatic""></div>
                    </div> 
                </div>
                <br />
                <div class=""row"">
                    <div class=""col-md-12""> 
                        <div id=""gridContainerSales""></div>
                    </div>
                </div>

            </div>
     ");
            WriteLiteral(@"   </div>
    </div>
</div>

<br />


        <div class=""card"">
            <div class=""card-header"">
                <h3 style=""display: inline-block;"">Quotation Statics</h3>
            </div>
            <div class=""card-body"">
                <div class=""row"">
                    <div class=""col-md-6"">
                        <nav>
                            <div class=""nav nav-tabs"" id=""nav-tab"" role=""tablist"">
                                <a class=""nav-item nav-link active tab_text"" id=""nav-daily-tab"" data-toggle=""tab"" href=""#nav-daily"" role=""tab"" aria-controls=""nav-daily"" aria-selected=""true"">Today</a>
                                <a class=""nav-item nav-link tab_text"" id=""nav-weekly-tab"" data-toggle=""tab"" href=""#nav-weekly"" role=""tab"" aria-controls=""nav-weekly"" aria-selected=""false"">Current Week</a>
                                <a class=""nav-item nav-link tab_text"" id=""nav-monthly-tab"" data-toggle=""tab"" href=""#nav-monthly"" role=""tab"" aria-controls=""nav-monthly"" aria-selecte");
            WriteLiteral(@"d=""false"">Current Month</a>
                            </div>
                        </nav>
                        <div class=""tab-content"" id=""nav-tabContent"">
                            <div class=""tab-pane fade show active tab_Panel_body"" id=""nav-daily"" role=""tabpanel"" aria-labelledby=""nav-daily-tab"">
                                <div id=""gridContainer1""></div>
                            </div>

                            <div class=""tab-pane fade tab_Panel_body"" id=""nav-weekly"" role=""tabpanel"" aria-labelledby=""nav-weekly-tab"">
                                <div id=""gridContainer2""></div>
                            </div>

                            <div class=""tab-pane fade tab_Panel_body"" id=""nav-monthly"" role=""tabpanel"" aria-labelledby=""nav-monthly-tab"">
                                <div id=""gridContainer3""></div>
                            </div>
                        </div>

                    </div>
                    <div class=""col-md-6"">
                    ");
            WriteLiteral("    <div id=\"chart\"></div>\r\n                    </div>\r\n                    </div>\r\n                </div>\r\n           </div>\r\n     \r\n");
            WriteLiteral(@"         

        <br />


        <!--<div class=""row"">
        <div class=""col-md-6"">
            <div class=""card"">
                <div class=""card-header"">
                </div>
                <div class=""card-body"">
                    <div id=""chart""></div>
                </div>
            </div>
        </div>-->
");
            WriteLiteral(@"        <!--</div>-->

        <br />
        <div class=""row"">
            <div class=""col-md-12"">

                <div class=""card"">
                    <div class=""card-header"">
                        <h3 style=""display: inline-block;"">Quotations</h3>
                        <button type=""button"" onclick=""location.href='/Quotation/CreateQuotation'"" id=""createQuotation"" class=""btn btn-info btn-fw float-right"" style=""display: block !important;"">Add New Quotation</button>
                    </div>
                    <div class=""card-body"">
                        <div id=""gridContainer""></div>
                    </div>
                </div>
            </div>
        </div>


        <!-- History Modal -->
        <div class=""modal fade bd-example-modal-lg"" id=""historyModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
            <div class=""modal-dialog modal-lg"">
                <div class=""modal-content"">
                    <div class=""m");
            WriteLiteral(@"odal-header"">
                        <h4 class=""modal-title"">Quotation History</h4>
                        <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                    </div>
                    <div class=""modal-body"">
                        <div class=""card"">
                            <div class=""card-body"">
                                <div class=""row"">
                                    <div id=""gridHContainer""></div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-dark btn-fw"" data-dismiss=""modal"">Close</button>
                    </div>
                </div>

            </div>
        </div>


        <!-- Modal -->
        <div class=""modal fade bd-example-modal-lg"" id=""myModal"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-");
            WriteLiteral(@"hidden=""true"">
            <div class=""modal-dialog modal-lg"">
                <div class=""modal-content"">
                    <div class=""modal-header"">
                        <h4 class=""modal-title"">Report</h4>
                        <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
                    </div>
                    <div class=""modal-body"">
                        <div id=""load"">
                            <div class=""loader""></div>
");
            WriteLiteral(@"                        </div>
                        <div class=""row"" id=""btn_email"">
                            <div class=""col-md-12"">
                                <button type=""button"" class=""btn btn-gradient-info btn-icon-text float-right"" onclick=""sendEmail()"">
                                    Send <i class=""mdi mdi-email btn-icon-append""></i>
                                </button>
                            </div>
                        </div>
                        <hr />
                        <div id=""repotdata""> </div>
                    </div>
                    <div class=""modal-footer"">
                        <button type=""button"" class=""btn btn-dark btn-fw"" data-dismiss=""modal"">Close</button>
                    </div>
                </div>

            </div>
        </div>





");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
