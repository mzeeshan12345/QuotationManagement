#pragma checksum "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\UpdateQuotation.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "3b0e08867d5eab9c4c34b8d0ca154eebdc8b021dfc36d4949f0f88d5b5f023ac"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Quotation_UpdateQuotation), @"mvc.1.0.view", @"/Views/Quotation/UpdateQuotation.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management

#nullable disable
    ;
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management.Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#nullable disable
    ;
#nullable restore
#line 5 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

#nullable disable
    ;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"3b0e08867d5eab9c4c34b8d0ca154eebdc8b021dfc36d4949f0f88d5b5f023ac", @"/Views/Quotation/UpdateQuotation.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"e5aa15149a6f814aca9c9febb58b8d5784979381ee3c7539cba075d77e91d2ea", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    internal sealed class Views_Quotation_UpdateQuotation : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("cuStoMerForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("forms-sample"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("novalidate", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\UpdateQuotation.cshtml"
  
    var custoMers = (IEnumerable<SelectListItem>)ViewData["Customers"];

#line default
#line hidden
#nullable disable

            WriteLiteral(@"
<script>
    var quotdata = [];
    var Status = [];
    var quotes;
    var compBank;
    var comp;
    var tc;
    var url = """";
    var termsdata;
    var cv = """";
    var QId;
    var fcx ;
    var date;
    var existRole;
    var isSuperAdmin;
    var isManager;
    var approvaL = ['Pending', 'Approved','Reject'];
    var quotationStatus = ['Proposal', 'Quotation', 'Waiting PO', 'PO Received', 'Invoiced', 'Cancelled'];
    var statusApproval = ['Pending', 'Approved', 'Reject'];
    var perms;

    var percentageValue;
    var flatValue;

    var isPerItem;
    var isFlat;
    var toTal;

    var authPages1;
    var roles1;
    var permission;
    var menu1;
    var count1 = 0;
    var z = 0;

    $(function () {
        $('#ReasonBox').hide();
        getCompAny();
        var url_string = top.location.href
        var url = new URL(url_string);
        QId = url.searchParams.get('id');
        getQuotById(QId);
        var today = new Date();
        date = f");
            WriteLiteral(@"ormatDate(new Date(today));
        $('#DatE').html(date); 

        $(""#html-editor"").dxHtmlEditor({
            height: 370,
            toolbar: {
                items: [
                    ""undo"", ""redo"", ""separator"",
                    {
                        name: ""size"",
                        acceptedValues: [""8pt"", ""10pt"", ""12pt"", ""14pt"", ""18pt"", ""24pt"", ""36pt""]
                    },
                    {
                        name: ""font"",
                        acceptedValues: [""Arial"", ""Courier New"", ""Georgia"", ""Impact"", ""Lucida Console"", ""Tahoma"", ""Times New Roman"", ""Verdana""]
                    },
                    ""separator"", ""bold"", ""italic"", ""strike"", ""underline"", ""separator"",
                    ""alignLeft"", ""alignCenter"", ""alignRight"", ""alignJustify"", ""separator"",
                    {
                        name: ""header"",
                        acceptedValues: [false, 1, 2, 3, 4, 5]
                    }, ""separator"",
                    ""orderedList""");
            WriteLiteral(@", ""bulletList"", ""separator"",
                    ""color"", ""background"", ""separator"",
                    ""clear"", ""codeBlock"", ""blockquote""
                ]
            },
            mediaResizing: {
                enabled: true
            },
            export: {
                enabled: true,
                printingEnabled: false
            },

        });

            GetSubitem(); 
     });


    function GetSubitem() {

        $.get('/Quotation/GetItems', function (data) {
            fcx = data;
            //fcx = iTemSs.filter(d => d.MainItemId == rowData.MainItemId);

        });
    }

    function formatDate(date) {
        var day = date.getDate();
        var month = date.getMonth() + 1;
        var year = date.getFullYear();

        var formatted = (day < 10 ? ""0"" : """") + day + ""-"" + (month < 10 ? ""0"" : """") + month + ""-"" + year;
        return formatted;
    }

            function getQuotById() {
             $.get('/Quotation/GetQuotation?quoteID='");
            WriteLiteral(@" + QId, function (data) {
                termsdata = data;
                 $("".dx-htmleditor-content"").html(termsdata.TermsConditions);
                 $('#ReferenceNo').html(termsdata.ClientReference);
                 $('#Discount').val(termsdata.Discount);
                 $('#Description').val(termsdata.Description);
                 $('#Text').val(termsdata.Text);



                 $('#checkPerItem').dxCheckBox({
                     elementAttr: {
                         name: ""IsPerItem"",
                         class: ""mt_25"",
                     },
                     value: termsdata.isPerItem,
                     onValueChanged: function (e) {

                         isPerItem = e.value;
                         if (isPerItem == true) {

                             $(""#Discount"").val(0);
                             $(""#Discount"").attr('readonly', true);

                             $('#discounTPercentage').dxCheckBox({
                                 value: ");
            WriteLiteral(@"null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                             $('#discounTFlat').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                             $('#checkFlat').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');
                         }
                         else {

                             $('#discounTPercentage').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');

                             $('#discounTFlat').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             ");
            WriteLiteral(@"}).dxCheckBox('instance');

                             $('#checkFlat').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                             $(""#Discount"").val(0);
                             $(""#Discount"").attr('readonly', false);
                         }
                     },
                 });


                 $('#checkFlat').dxCheckBox({
                     elementAttr: {
                         name: ""IsFlat"",
                         class: ""mt_25"",
                     },
                     value: termsdata.IsFlat,
                     onValueChanged: function (e) {
                         isFlat = e.value;
                         if (isFlat == true) {
                             $(""#Discount"").attr('readonly', false);
                             $(""#Discount"").addClass('input-disabled_css');

                             $('#checkPerI");
            WriteLiteral(@"tem').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');

                             $('#discounTPercentage').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                             $('#discounTFlat').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                         }
                         else if (isPerItem != true) {

                             $('#discounTPercentage').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');

                             $('#discounTFlat').dxCheckBox({
                                ");
            WriteLiteral(@" value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');

                             $('#checkPerItem').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');

                             $(""#Discount"").val(0);
                             $(""#Discount"").attr('readonly', true);
                         }
                     },
                 });


                 $('#discounTPercentage').dxCheckBox({
                     elementAttr: {
                         name: ""Percentage"",
                         class: ""mt_25"",
                     },
                         value: termsdata.Percentage,
                     onValueChanged: function (e) {
                         percentageValue = e.value;
                     },
                 });

                 $('#discounTFlat').dxCheckBox({
              ");
            WriteLiteral(@"       elementAttr: {
                         name: ""Flat"", 
                         class: ""mt_25"",
                     },
                      value: termsdata.FlaT,
                     onValueChanged: function (e) {
                         flatValue = e.value;
                         if (flatValue == true) {
                             $('#discounTPercentage').dxCheckBox({
                                 value: null,
                                 disabled: true,
                             }).dxCheckBox('instance');

                         }
                         else {
                             $('#discounTPercentage').dxCheckBox({
                                 value: null,
                                 disabled: false,
                             }).dxCheckBox('instance');
                         }
                     },
                 });

                 if (termsdata.Text != null) {
                     $('#ReasonBox').show();
                 ");
            WriteLiteral(@"} else {
                     $('#ReasonBox').hide();
                 }

                 console.log(termsdata, ""termsData"");

                 
                
                 //$.get('/Admin/GetFlowStatusByCurrentUser', function (data) {
                 $.get('/Admin/GetFlowStatusByUser?iD=' + termsdata.CreatedBy, function (data) {
                     var checkperms = data; 

                     var ckPermissioN = checkperms.find(d => d.FlowStatus == termsdata.QuotationStatus);
                     //var managerPermissioN = checkperms.find(s => s.ManagerApproval == true);
                     var arr1 = ['Pending'];

                     console.log(ckPermissioN, 'adMinPermissioN');
 
                     if (ckPermissioN && termsdata.QuotationStatus != ""Cancelled"" && !arr1.includes(termsdata.Manager) && !arr1.includes(termsdata.Admin))
                     {
                         $('#QStatus').dxSelectBox({
                             items: quotationStatus,
               ");
            WriteLiteral(@"              value: termsdata.QuotationStatus,
                             name: ""QuotationStatus"",
                             searchEnabled: true,
                             showClearButton: true,
                             onValueChanged(currentStatus) {
 

                                 var DPermissioN = checkperms.find(d => d.FlowStatus == currentStatus.value);
                                 console.log(DPermissioN, ""DPermissioN"");
                                     /*var arr = ['Pending', 'Reject'];*/
                                
                                     $.get('/Quotation/CheckQuotationHistory?quoteID=' + QId + '&status=' + currentStatus.value, function (data) {
                                         console.log(data, ""data"");
                                         if (data == null && DPermissioN.ManagerApproval == true && DPermissioN.AdminApproval == true)
                                         {
                                             console.log(");
            WriteLiteral(@"'1');
                                             $('#checkedAdmin').dxSelectBox('instance').option('value', 'Pending');
                                             $('#checked').dxSelectBox('instance').option('value', 'Pending');
                                         } 
                                           
                                         else if (data == null && DPermissioN.AdminApproval == true && DPermissioN.ManagerApproval == false)
                                         {
                                             console.log('4');

                                             $('#checkedAdmin').dxSelectBox('instance').option('value', 'Pending');
                                             $('#checked').dxSelectBox('instance').option('value', 'N/A');
                                         } 

                                         else if (data == null && DPermissioN.AdminApproval == false && DPermissioN.ManagerApproval == true)
                                ");
            WriteLiteral(@"         {
                                             console.log('5');

                                             $('#checkedAdmin').dxSelectBox('instance').option('value', 'N/A');
                                             $('#checked').dxSelectBox('instance').option('value', 'Pending');
                                         }

                                         else if (data == null && DPermissioN.AdminApproval == false && DPermissioN.ManagerApproval == false)
                                         {
                                             console.log('6');

                                             $('#checked').dxSelectBox('instance').option('value', 'N/A');
                                             $('#checkedAdmin').dxSelectBox('instance').option('value', 'N/A');
                                         }
                                     });
                             }
                         });
                     }
                     else {
");
            WriteLiteral(@"                         $('#QStatus').dxSelectBox({
                             items: quotationStatus,
                             value: termsdata.QuotationStatus,
                             name: ""QuotationStatus"",
                             searchEnabled: true,
                             readOnly: true,
                             showClearButton: true,
                             onValueChanged(data) {
                                 console.log(data, 'DaTa');

                                 $.get('/Quotation/CheckQuotationHistory?quoteID=' + QId + '&status=' + data.value, function (data) {
                                     console.log(data, ""data"");
                                     if (data == null) {
                                         //$('#checked').value = false;
                                         console.log($('#checked'));
                                         console.log($('#checked').value);
                                         termsdata.Adm");
            WriteLiteral(@"in == false;
                                         termsdata.Manager == false;
                                     }
                                 });
                             }
                         });
                     }

                 });
                //****Get Current User with roles*****
                 $.get('");
            Write(
#nullable restore
#line 356 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\UpdateQuotation.cshtml"
                         Url.Action("CurrentUserList", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral("\', function (data) {\r\n                     roles1 = data;\r\n                      console.log(roles1.result, \"result cccc roLes\");\r\n\r\n                      // **** Get All Assigned Pages By Role ***\r\n                     $.post(\'");
            Write(
#nullable restore
#line 361 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\UpdateQuotation.cshtml"
                              Url.Action("GetMethodPermission", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', { role: roles1.result }, function (data) {
                         menu1 = data;
                         console.log(menu1, ""menu1"");

                           if (menu1.length > 0) {
                             for (var i = 0; i < menu1.length; i++) {
                                  count1++

                                 if (menu1[i].PageName == ""Approval Method"")
                                 {
                                     if (menu1[i].Read == true) {
                                          $('#Status').dxSelectBox({
                                             items: approvaL,
                                             value: termsdata.Status,
                                             name: ""Status"",
                                             searchEnabled: true,
                                             showClearButton: true
                                         });
                                     }
                                     else {");
            WriteLiteral(@"
                                          $('#Status').dxSelectBox({
                                             items: approvaL,
                                             value: termsdata.Status,
                                             name: ""Status"",
                                             readOnly: true,
                                             searchEnabled: true,
                                             showClearButton: true
                                         });
                                     }

                                 }



                                 //else if (menu1[i].PageName == ""Quotation Status"")
                                 //{
                                 //    if (menu1[i].Read == true) {
                                 //         $('#QStatus').dxSelectBox({
                                 //            items: quotationStatus,
                                 //            value: termsdata.QuotationStatus,
         ");
            WriteLiteral(@"                        //             name: ""QuotationStatus"",
                                 //            searchEnabled: true,
                                 //            showClearButton: true
                                 //        });
                                 //    }
                                 //    else {
                                 //         $('#QStatus').dxSelectBox({
                                 //            items: quotationStatus,
                                 //            value: termsdata.QuotationStatus,
                                 //             name: ""QuotationStatus"",
                                 //            readOnly: true,
                                 //            searchEnabled: true,
                                 //            showClearButton: true
                                 //        });
                                 //    }

                                 //}


                             }
             ");
            WriteLiteral(@"              }
                     });
                     console.log(roles1.result, ""roles1.result"");
              existRole = roles1.result; 
                     //$.get('/Admin/GetFlowStatusByCurrentUser', function (data) {
                     $.get('/Admin/GetFlowStatusByUser?iD=' + termsdata.CreatedBy, function (data) {
                   var permission1 = data;

                //Check for approved permission
                 isManager = roles1.result.filter(dx => dx.RoleName == 'Manager');
                 isSuperAdmin = roles1.result.filter(dx => dx.RoleName == 'SuperAdmin');

                 var arr = ['Pending', 'Reject'];  
                 var permission = permission1.find(d => d.FlowStatus == termsdata.QuotationStatus);
                

                         if (permission && permission.ManagerApproval == true
                             && isManager.length > 0) {
                            $('#checked').dxSelectBox({
                                items: statusA");
            WriteLiteral(@"pproval,
                                value: termsdata.Manager,
                                name: ""Manager"",
                                searchEnabled: true,
                                showClearButton: true,
                                onValueChanged(data) {
                                    if (data.value == ""Reject"") {
                                        $('#ReasonBox').show();
                                    } else {
                                        $('#ReasonBox').hide();
                                    }
                                }
                            });
                        }
                        else {

                            $('#checked').dxSelectBox({
                                items: statusApproval,
                                value: termsdata.Manager,
                                name: ""Manager"",
                                readOnly: true,
                                searchEnabled: true,
   ");
            WriteLiteral(@"                             showClearButton: true
                            });

                        } 
                  
                 if (permission && permission.AdminApproval == true && isSuperAdmin.length > 0)
                 {
                          $('#checkedAdmin').dxSelectBox({
                                items: statusApproval,
                                value: termsdata.Admin,
                                name: ""Admin"",
                                searchEnabled: true,
                                showClearButton: true,
                                onValueChanged(data) {
                                    if (data.value == ""Reject"") {

                                        $('#ReasonBox').show();
                                    } else {
                                        $('#ReasonBox').hide();
                                    }
                                }
                            });
                      
         ");
            WriteLiteral(@"               }
                        else {

                            $('#checkedAdmin').dxSelectBox({
                                items: statusApproval,
                                value: termsdata.Admin,
                                name: ""Admin"",
                                readOnly: true,
                                searchEnabled: true,
                                showClearButton: true
                            });

                        }
                   
            });
        });


                 $.get('/Quotation/GetCustomers', function (data) {

                     $('#Clients').dxSelectBox({
                         dataSource: new DevExpress.data.ArrayStore({
                             data: data,
                         }), inputAttr: {
                             name: ""ClientId""
                         },
                         displayExpr: 'ClientName',
                         valueExpr: 'ClientId',
                   ");
            WriteLiteral(@"      searchEnabled: true,
                         showClearButton: true,
                         value: termsdata.ClientId
                     }).dxValidator({
                         validationRules: [{ type: 'required' }]
                     });
                 });
            Quotationgrid(termsdata);

             });


    }
 

    function getCompAny() {
        var data = JSON.parse(localStorage.getItem('User'));
        var cmpId = data.CompanyId;
        $.get('/Company/GetCompany?cmpID=' + cmpId, function (data) {
            console.log(data, ""Company data"")
            comp = data;


            $.get('/Company/GetCompanyBank?iD=' + cmpId, function (data) {
                console.log(data, ""compBank data"")
                compBank = data;



            $('#CompanyId').html(comp.CompanyId);
            $('#CompanyName').html(comp.CompanyName);
            $('#BankCompanyName').html(comp.CompanyName);
            $('#TRN').html(comp.TRN);
            $('#Ema");
            WriteLiteral(@"il').html('Email: ' + comp.Email);
            $('#Address').html(comp.Address);
            $('#Phone').html('Tel: ' + comp.Phone);
            $('#Fax').html('Fax: ' + comp.Fax);
            $('#Website').html('Website: ' + comp.Website);
             $('#Footer').html(comp.Footer);

                $('#BankName').html(compBank.BankName);
                $('#AccountNumber').html(compBank.AccountNumber);
                $('#IBAN').html(compBank.IBAN);
                $('#SwiftCode').html(compBank.SwiftCode);
        });
      });
   }


    function Quotationgrid(termsdata) {
        $.get('/Quotation/GetItemLists', function (data) {
            quotes = data;

            $.get('/Quotation/GetAllItems', function (data) {
                iteMs = data;

            $(""#gridContainer"").dxDataGrid({
                dataSource: termsdata.Master_Detail_Tables,
                keyExpr: ""MasterDetailId"",
                showBorders: true,
                columnAutoWidth: true,
          ");
            WriteLiteral(@"      allowColumnResizing: true,
                columnHidingEnabled: true,
                hoverStateEnabled: true,
                editing: {
                    mode: 'batch',
                    allowAdding: true,
                    allowUpdating: true,
                    useIcons: true
                },
                columnsAutoWidth: true,
                showBorders: true,
                filterRow: {
                    visible: true,
                    applyFilter: ""auto""
                },
                searchPanel: {
                    visible: true,
                    placeholder: ""Search...""
                },
                export: {
                    enabled: true,
                },
                onExporting: function (e) {
                    console.log(e, ""e"");
                    e.fileName = ""Quotation List""
                },
                headerFilter: {
                    visible: true
                },
                onEditorPreparing(e");
            WriteLiteral(@") {
                    if (e.parentType == 'dataRow' && e.dataField == 'MasterId') {
                        e.editorOptions.disabled = (typeof e.row.data.MainItemId !== 'number');
                    }
                    if (isPerItem != true) {
                        $(""#gridContainer"").dxDataGrid(""columnOption"", ""Discount"", ""visible"", false);
                    }
                    else if (isPerItem == true) {
                        $(""#gridContainer"").dxDataGrid(""columnOption"", ""Discount"", ""visible"", true);
                    }
                },
                onCellPrepared: function (e) {
                    toTal = e.component.getTotalSummaryValue(""toTalLast"");
                    $('#GrandTotal').val(toTal); 
                },

                columns: [
                    {
                        dataField: ""CreatedBy"",
                       visible: false
                    },
                    {
                        dataField: 'MainItemId',
               ");
            WriteLiteral(@"         caption: 'Item',
                        //setCellValue: function (rowData, value) {
                        setCellValue(rowData, value) {
                            rowData.MainItemId = value;
                            rowData.MasterId = null;
                        },
                        lookup: {
                            dataSource: iteMs,
                            valueExpr: 'MainItemId',
                            displayExpr: 'Name',
                        },
                    },

                    {
                        dataField: 'MasterId',
                        caption: 'Description',
                        lookup: {
                            dataSource(options) {
                                return {
                                    store: fcx,
                                    filter: options.data ? ['MainItemId', '=', options.data.MainItemId] : null,
                                };
                            },
              ");
            WriteLiteral(@"              valueExpr: 'MasterId',
                            displayExpr: 'Item',
                        },
                        setCellValue: function (rowData, value) {
                            rowData.MasterId = value;
                            var v = quotes.find(d => d.MasterId == value);
                             rowData.Price = v.Price;
                        },
                    },


                    {
                        dataField: ""Price"",
                        allowEditing: false
                    },
                    {
                        dataField: ""Quantity"",
                        caption: 'Qty',
                        validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: ""Discount"",
                    },
                    {
                        dataField: ""Payable"",
                        allowEditing: false,
                        //dataType: ""number"",
  ");
            WriteLiteral(@"                      caption: 'Total Amount Payable',
                        type: ""fixedPoint"",
                        precision: 2,
                        calculateCellValue(rowData) {
                            if (isPerItem == true) {

                                if (flatValue == true) {
                                    return rowData.Payable = (rowData.Price - rowData.Discount) * rowData.Quantity;
                                }
                                else if (percentageValue == true) {
                                    var percentageDiscount = (rowData.Price * rowData.Discount / 100);
                                    return rowData.Payable = (rowData.Price - percentageDiscount) * rowData.Quantity;
                                }
                                else {
                                    return rowData.Payable = rowData.Price * rowData.Quantity;
                                }
                            }
                            else {");
            WriteLiteral(@"
                                return rowData.Payable = rowData.Price * rowData.Quantity;
                            }
                        },
                    }],
                summary: {
                    recalculateWhileEditing: true,
                    totalItems: [{
                        name: 'toTalLast',
                        column: 'Payable',
                        summaryType: 'sum'
                    }],
                },  
            });

            });
        });
    }



    function checkValidations() {

        if (!$('#customEr').val()) {
            toastr.error('Client is required');
        }
    }


    function onSubmit() {

        //checkPermissions();
        var quotdata = termsdata.Master_Detail_Tables;
        var description = $("".dx-htmleditor-content"").html();
        var reference = $('#ReferenceNo').text();
        var model = $('#cuStoMerForm').serializeArray();
        console.log(reference, ""reference"");
        /");
            WriteLiteral(@"*  termsdata.CompanyId =*/
        console.log(model, ""model"");
        var model = {
            CompanyId: termsdata.CompanyId,
            ClientId: model[0].value,
            Status: model[2].value,
            Discount: model[12].value,
            QuotationStatus: model[3].value,
            ClientReference: reference,
            EmailStatus: termsdata.EmailStatus,
            CreatedAt: termsdata.CreatedAt,
            QuotationId: termsdata.QuotationId,
            TermsConditions: description,
            Manager: model[4].value,
            Admin: model[5].value,
            Text: model[6].value,
            IsPerItem: model[7].value,
            IsFlat: model[8].value,
            Flat: model[9].value,
            Percentage: model[10].value,
            Description: model[11].value,
            Total: model[13].value,
            CreatedBy: termsdata.CreatedBy,
            EmailDate: termsdata.EmailDate
        }

        console.log(model, 'moDel');
 
        $.get('");
            WriteLiteral(@"/Admin/GetFlowStatusByUser?iD=' + termsdata.CreatedBy, function (data) {
            var perm = data;
            console.log(perm, ""peRm""); 
             
            var PermissioN = perm.find(d => d.FlowStatus == model.QuotationStatus);
            console.log(PermissioN, ""PermissioN"");
            var arr = ['Pending'];
            if (isSuperAdmin.length > 0 && PermissioN) {
                if (PermissioN.AdminApproval == true && PermissioN.ManagerApproval == true && !arr.includes(model.Manager)) {
                    

                    $.post('/Quotation/pOSTUpdateQuotation', { model: model, quotdata: quotdata }, function (data) {
                        if (data) {
                            toastr.success('Success');
                            setTimeout(function () {
                                //window.location.reload();
                            }, 3000);
                        }
                        else {
                            setTimeout(function () {
    ");
            WriteLiteral(@"                            toastr.error('Error!');
                            }, 2000);

                        };
                    });
                }
                else {
                    $.post('/Quotation/pOSTUpdateQuotation', { model: model, quotdata: quotdata }, function (data) {
                        if (data) {
                            toastr.success('Success');
                            setTimeout(function () {
                                //window.location.reload();
                            }, 3000);
                        }
                        else {
                            setTimeout(function () {
                                toastr.error('Error!');
                            }, 2000);

                        };
                    });
                }
            } 
             

            else if (isManager.length > 0 && PermissioN) {
                if (PermissioN.ManagerApproval == true) {
                   
             ");
            WriteLiteral(@"       $.post('/Quotation/pOSTUpdateQuotation', { model: model, quotdata: quotdata }, function (data) {
                        if (data) {
                            toastr.success('Success');
                            setTimeout(function () {
                                 window.location.reload();
                            }, 3000);
                        }
                        else {
                            setTimeout(function () {
                                toastr.error('Error!');
                            }, 2000);

                        };
                    });
                }
                else {
                    $.post('/Quotation/pOSTUpdateQuotation', { model: model, quotdata: quotdata }, function (data) {
                        if (data) {
                            toastr.success('Success');
                            setTimeout(function () {
                                 window.location.reload();
                            }, 3000);
  ");
            WriteLiteral(@"                      }
                        else {
                            setTimeout(function () {
                                toastr.error('Error!');
                            }, 2000);

                        };
                    });
                }
            }
           

            else if (isManager.length == 0 && isSuperAdmin.length == 0 && PermissioN || !arr.includes(model.Admin) && !arr.includes(model.Manager)) {
                 $.post('/Quotation/pOSTUpdateQuotation', { model: model, quotdata: quotdata }, function (data) {
                    if (data) {
                        toastr.success('Success');
                        setTimeout(function () {
                            window.location.reload();
                        }, 3000);
                    }
                    else {
                        setTimeout(function () {
                            toastr.error('Error!');
                        }, 2000);

                    };
       ");
            WriteLiteral(@"         });
            }

            else {
                toastr.error('Access Denied!');
            }
        });
    }
</script>

<style>

    .input-disabled_css {
        background-color: #EBEBE4;
        border: 1px solid #ABADB3;
        padding: 2px 1px;
    }

        .dx-checkbox-icon {
            border-color: #3d83bf !important;
        }

        .dx-checkbox.dx-state-readonly .dx-checkbox-icon {
            border-color: #3d83bf !important;
            background: #dbdbdb !important;
        }

    .mt_25 {
        margin-top: 12px !important;
        margin-left: 10px;
    }

        .dx-texteditor.dx-editor-outlined {
            border: 1px solid #b5b5b5;
            border-radius: 0px !important;
            height: 47% !important;
        }

        table.table-bordered > tbody > tr > td {
            border: 1px solid black !important;
        }

        /* .form-control {
            border: none !important;
        }*/

        /*    .");
            WriteLiteral("form-control[readonly] {\r\n                background: none;\r\n            }\r\n    */\r\n        .blockquote {\r\n            border: 1px solid #9ea3af !important;\r\n        }\r\n</style>\r\n\r\n<div class=\"card\">\r\n    <div class=\"card-header\">\r\n        <h1");
            BeginWriteAttribute("class", " class=\"", 36825, "\"", 36833, 0);
            EndWriteAttribute();
            WriteLiteral(@">Update Quotation</h1>
    </div>
    <div class=""card-body"">
        <div class=""row"">
            <div class=""col-lg-8"">

                <div class=""row"">
                    <div class=""col-md-4"">
                        <p class=""mb-0 font-weight-bold"" id=""CompanyName""></p>
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-md-4"">
");
            WriteLiteral(@"                        <address id=""Address"">  </address>
                    </div>
                </div>


                <div class=""row"">
                    <div class=""col-md-3"">
                        <p id=""Phone""></p>
                    </div>
                    <div class=""col-md-3"">
                        <p id=""Fax""></p>
                    </div>
                </div>

                <div class=""row"">
                    <div class=""col-md-4"">
                        <p id=""Website""></p>
                    </div>
                    <div class=""col-md-6"">
                        <p id=""Email""></p>
                    </div>
                </div>


            </div>


            <div class=""col-lg-4"">
                <table class=""table table-bordered"">
                    <tbody>
                        <tr>
                            <td> Reference No: </td>
                            <td id=""ReferenceNo"" class=""font-weight-bold"">  </td>
          ");
            WriteLiteral(@"              </tr>
                        <tr>
                            <td> TRN </td>
                            <td id=""TRN"" class=""font-weight-bold""> </td>
                        </tr>
                        <tr>
                            <td> Quote Date </td>
                            <td class=""font-weight-bold"" id=""DatE"">  </td>
                        </tr>

                    </tbody>
                </table>

            </div>
        </div>
        <hr class=""sidebar-divider d-none d-md-block"">

        ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3b0e08867d5eab9c4c34b8d0ca154eebdc8b021dfc36d4949f0f88d5b5f023ac46101", async() => {
                WriteLiteral("\r\n            <div class=\"row\">\r\n                <div class=\"col-md-12\">\r\n");
                WriteLiteral(@"
                    <div class=""form-row"">
                        <div class=""form-group col-md-3"">
                            <label class=""col-form-label"">Client  <em class=""text-danger"">*</em></label>
                            <div id=""Clients""></div>
                        </div>



                        <div class=""form-group col-md-3"" id=""approvalQuotation"">
                            <label class=""col-form-label"">Discount Approval </label>
                            <div id=""Status""></div>
                        </div>
                        <div class=""form-group col-md-3"" id=""approvalQuotation"">
                            <label class=""col-form-label"">Quotation Status </label>
                            <div id=""QStatus""></div>
                        </div>
                    </div>
                    <div class=""form-row"">
                        <div class=""form-group col-md-3""");
                BeginWriteAttribute("id", " id=\"", 40049, "\"", 40054, 0);
                EndWriteAttribute();
                WriteLiteral(">\r\n                            <label class=\"col-form-label\">Manager Approval </label>\r\n                            <div id=\"checked\"></div>\r\n                        </div>\r\n\r\n                        <div class=\"form-group col-md-3\"");
                BeginWriteAttribute("id", " id=\"", 40287, "\"", 40292, 0);
                EndWriteAttribute();
                WriteLiteral(@">
                            <label class=""col-form-label"">Admin Approval </label>
                            <div id=""checkedAdmin"" class=""product-handler""></div>
                        </div>

                        <div class=""form-group col-md-6"" id=""ReasonBox"">
                            <label class=""col-form-label"">Reason <em>*</em></label>
                            <textarea name=""Text"" id=""Text"" placeholder=""Please describe the reject reason"" class=""form-control"" required></textarea>
                        </div>
                    </div>
                    <div class=""form-row"">
                        <div class=""form-group col-md-3"">
                            <label");
                BeginWriteAttribute("for", " for=\"", 41003, "\"", 41009, 0);
                EndWriteAttribute();
                WriteLiteral(@" class=""col-form-label"" style=""display:inline-block"">PerItem Discount</label>
                            <div id=""checkPerItem""></div>
                        </div>

                        <div class=""form-group col-md-3"">
                            <label");
                BeginWriteAttribute("for", " for=\"", 41275, "\"", 41281, 0);
                EndWriteAttribute();
                WriteLiteral(@" class=""col-form-label"" style=""display:inline-block""> Flat Discount </label>
                            <div id=""checkFlat""></div>
                        </div>
                    </div>

                    <div class=""form-row"">
                        <div class=""form-group col-md-3"">
                            <label");
                BeginWriteAttribute("for", " for=\"", 41615, "\"", 41621, 0);
                EndWriteAttribute();
                WriteLiteral(@" class=""col-form-label"" style=""display:inline-block"">Number(AED) </label>
                            <div id=""discounTFlat""></div>
                        </div>

                        <div class=""form-group col-md-3"">
                            <label");
                BeginWriteAttribute("for", " for=\"", 41883, "\"", 41889, 0);
                EndWriteAttribute();
                WriteLiteral(@" class=""col-form-label"" style=""display:inline-block"">Percentage(%) </label>
                            <div id=""discounTPercentage""></div>
                        </div>

                    </div>

                    <div class=""form-row"">
                        <div class=""form-group col-md-6"">
                            <label class=""col-form-label"">Message <em>*</em></label>
                            <textarea name=""Description"" id=""Description"" class=""form-control"" required></textarea>
                        </div>
                    </div>

                </div>
            </div>
            <div class=""row"">
                <div class=""col-md-12"">
                    <div id=""gridContainer""></div>
                </div>
            </div>


            <div class=""row"">
                <div class=""col-md-9""> </div>
                <div class=""col-md-3"">
                    <label class=""col-form-label"">Flat Discount Amount(%) </label>
                    <input type=");
                WriteLiteral("\"number\" name=\"Discount\" id=\"Discount\" class=\"form-control\">\r\n                </div>\r\n            </div>\r\n            <input type=\"hidden\" id=\"GrandTotal\" name=\"Total\" />\r\n        ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

        <hr class=""sidebar-divider d-none d-md-block"">
        <div class=""row"">

            <div class=""col-md-6"">
                <blockquote class=""blockquote"">
                    <h3 class=""text-center"">QUOTE CURRENCY: AED</h3>
                </blockquote>

                <div class=""html-editor"" id=""html-editor""></div>
");
            WriteLiteral(@"            </div>

            <div class=""col-lg-6"">
                <table class=""table table-bordered"">
                    <tbody>
                        <tr>
                            <td> Bank Name: </td>
                            <td id=""BankName"" class=""font-weight-bold"">  </td>
                        </tr>
                        <tr>
                            <td> Company Name: </td>
                            <td id=""BankCompanyName"" class=""font-weight-bold""> </td>
                        </tr>
                        <tr>
                            <td> Account Number: </td>
                            <td id=""AccountNumber"" class=""font-weight-bold""> </td>
                        </tr>
                        <tr>
                            <td> IBAN: </td>
                            <td id=""IBAN"" class=""font-weight-bold""> </td>
                        </tr>

                        <tr>
                            <td> SWIFT Code: </td>
                       ");
            WriteLiteral(@"     <td id=""SwiftCode"" class=""font-weight-bold""> </td>
                        </tr>

                    </tbody>
                </table>
            </div>
        </div>


        <hr class=""sidebar-divider d-none d-md-block"">
        <div class=""row"">
            <div class=""col-md-4""></div>
            <div class=""col-md-4"">
                <button type=""button"" class=""btn btn-info"" id=""btn_update"" onclick=""onSubmit()"">Update</button>
            </div>
            <div class=""col-md-4""></div>
        </div>



    </div>
</div>





<!-- Modal-2 -->
<div class=""modal fade bd-example-modal-lg2"" id=""exampleModalCenter2"" tabindex=""-1"" role=""dialog"" aria-labelledby=""myLargeModalLabel"" aria-hidden=""true"">
    <div class=""modal-dialog modal-dialog-centered  modal-lg"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h5 class=""modal-title"" id=""exampleModalLongTitle"">Add New Client</h5>
                <button type=""button"" class=""clo");
            WriteLiteral(@"se"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">&times;</span>
                </button>
            </div>
            <div class=""modal-body""> 
                <div class=""row"">
                    <div class=""col-12"">
                        <div class=""card"">
                            <div class=""card-body"">
                                

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button type=""button"" class=""btn btn-primary"" data-dismiss=""modal"">Close</button>
            </div>
        </div>
    </div>
</div>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
