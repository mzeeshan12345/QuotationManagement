#pragma checksum "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\Items.cshtml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "8ece234df7b594184194bff6b0b955bc3d24b1f266e62bbdcdbc06b080c7844c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCoreGeneratedDocument.Views_Quotation_Items), @"mvc.1.0.view", @"/Views/Quotation/Items.cshtml")]
namespace AspNetCoreGeneratedDocument
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Mvc;
    using global::Microsoft.AspNetCore.Mvc.Rendering;
    using global::Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management

#nullable disable
    ;
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using Quotation_Management.Models

#nullable disable
    ;
#nullable restore
#line 4 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExpress.AspNetCore

#nullable disable
    ;
#nullable restore
#line 5 "C:\Softwares\Quotation_Management\Quotation_Management\Views\_ViewImports.cshtml"
using DevExtreme.AspNet.Mvc

#nullable disable
    ;
    #line default
    #line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"8ece234df7b594184194bff6b0b955bc3d24b1f266e62bbdcdbc06b080c7844c", @"/Views/Quotation/Items.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"Sha256", @"e5aa15149a6f814aca9c9febb58b8d5784979381ee3c7539cba075d77e91d2ea", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    internal sealed class Views_Quotation_Items : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("id", new global::Microsoft.AspNetCore.Html.HtmlString("mainItemForm"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("class", new global::Microsoft.AspNetCore.Html.HtmlString("forms-sample"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("novalidate", new global::Microsoft.AspNetCore.Html.HtmlString(""), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\Items.cshtml"
  
    ViewData["Title"] = "Items";

#line default
#line hidden
#nullable disable

            WriteLiteral(@"
<script>
    var Itemsdata = [];
    var companies = [];
    var mainItems = [];

    var regionDetail;
    var regions;
    var regions = [];
    var companiEs = [];
    var dropDownValue;
    var regiondropDown;
    var regionudropDown;
    var regiondropDownName;
    var itmData;
    var Pages;
    var uregionDetail;
    var subItemRegions;
    var CompanyID = 0;

    $(function () {

        var getPages = JSON.parse(localStorage.getItem('Pages'));
        Pages = getPages.find(dx => dx.PageName == ""Sub Items"");
        subItemRegions = getPages.find(dx => dx.PageName == ""SubItem Region"");
        if (Pages.Create == true) {
            $(""#btnSubmitCreate"").show();
        }
        else {
            $(""#btnSubmitCreate"").hide();
        }

        CompanyID = localStorage.getItem('CompanyId');
        getitems(CompanyID);
        GetmainItemS();
        GetRegions();
        GetCompanies();
    });


    function GetmainItemS() {
        $.get('");
            Write(
#nullable restore
#line 46 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\Items.cshtml"
                Url.Action("GetMainItems", "Quotation")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', function (data) {
            mainItems = data;

            $('#mainItemDropdown').dxSelectBox({
                dataSource: new DevExpress.data.ArrayStore({
                    data: mainItems,
                    key: 'MainItemId',
                }), inputAttr: {
                    id: ""mItems"",
                    name: ""MainItemId""
                },
                elementAttr: {
                    id: ""mItems"",
                    class: ""dxSelect_Box""
                },
                displayExpr: 'Name',
                valueExpr: 'MainItemId'
            });

        });
    }

    function GetCompanies() {
          $.get('");
            Write(
#nullable restore
#line 69 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\Items.cshtml"
                  Url.Action("GetActiveCompanies", "Company")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', function (data) {
            companiEs = data;

             $('#companyDropdown').dxSelectBox({
                 dataSource: new DevExpress.data.ArrayStore({
                     data: companiEs,
                     key: 'CompanyId',
                 }), inputAttr: {
                     id: ""compaNiEs"",
                     name: ""CompanyId""
                 },
                 elementAttr: {
                        id: ""compaNiEs"",
                        class: ""dxSelect_Box""
                 },
                 displayExpr: 'CompanyName',
                 valueExpr: 'CompanyId'
             });
        });
    }


        function GetRegions() {
         $.get('");
            Write(
#nullable restore
#line 92 "C:\Softwares\Quotation_Management\Quotation_Management\Views\Quotation\Items.cshtml"
                 Url.Action("GetRegions", "Admin")

#line default
#line hidden
#nullable disable
            );
            WriteLiteral(@"', function (data) {
             regions = data;
             console.log(regions, ""Regions"");
             $('#userRegions').dxTagBox({
                 searchEnabled: true,
                 placeholder: 'Choose or type Region',
                 dataSource: new DevExpress.data.ArrayStore({
                     data: regions,
                     key: 'RegionId',
                 }),
                 inputAttr: {
                     id: ""regioNs"",
                     name: ""MainItemRegions""
                 },
                 elementAttr: {
                     id: ""regioNs"",
                     class: ""dxTag_Box""
                 },
                 displayExpr: 'Name',
                 valueExpr: 'RegionId',
                 showSelectionControls: true,
                 maxDisplayedTags: 3,
                 onValueChanged(e) {
                     regiondropDown = e.value;
                 },
             });
        });
    }

    function getitems(CompanyID) {
        //");
            WriteLiteral(@"$.get('/Quotation/GetItems', function (data) { 
        $.get('/Quotation/GetItemList?CompanyId=' + CompanyID, function (data) {
             Itemsdata = data;
            console.log(Itemsdata)
            Itemgrid(Itemsdata);
        });
    }

    function Itemgrid(Itemsdata) {
        var test = false;
        if (subItemRegions && subItemRegions.Create == true) {
            test = true;
        }

        $.get('/Company/GetActiveCompanies', function (data) {
            companies = data;

            $(""#gridContainer"").dxDataGrid({
                dataSource: Itemsdata,
                keyExpr: ""MasterId"",
                showBorders: true,
                columnAutoWidth: true,
                allowColumnResizing: true,
                columnHidingEnabled: true,
                hoverStateEnabled: true,
                paging: {
                    pageSize: 10
                },
                editing: {
                    mode: 'row',
                    allowAdding: ");
            WriteLiteral(@"false,
                    allowUpdating(e) {
                        if (Pages && Pages.Update == true) {
                            return e;
                        }
                    },
                    useIcons: true
                },
                columnsAutoWidth: true,
                showBorders: true,
                filterRow: {
                    visible: true,
                    applyFilter: ""auto""
                },
                searchPanel: {
                    visible: true,
                    placeholder: ""Search...""
                },
                export: {
                    enabled: true,
                },
                onExporting: function (e) {
                    console.log(e, ""e"");
                    e.fileName = ""Items List""
                },
                 headerFilter: {
                    visible: true
                },
                columns: [
                    {
                        dataField: ""MasterId"",
     ");
            WriteLiteral(@"                   allowEditing: false
                    },
                    //{
                    //    dataField: 'CompanyId',
                    //    caption: 'Company',
                    //    validationRules: [{ type: 'required' }],
                    //    lookup: {
                    //        dataSource: companies,
                    //        displayExpr: 'CompanyName',
                    //        valueExpr: 'CompanyId',
                    //    },
                    //},

                    {
                        dataField: 'MainItemId',
                        caption: 'Item',
                        validationRules: [{ type: 'required' }],
                        lookup: {
                            dataSource: mainItems,
                            displayExpr: 'Name',
                            valueExpr: 'MainItemId',
                        },
                    },
                    {
                        dataField: ""Item"", 
              ");
            WriteLiteral(@"          validationRules: [{ type: 'required' }],
                    },
                    {
                        dataField: ""Price"",
                        validationRules: [{ type: 'required' }],
                    }],
                onRowInserted: function (e) {
                    var model = e.data;
                    model.CompanyId = CompanyID;
                    console.log(model, ""moDel"");
                    $.post('/Quotation/AddSubItem', { model, model }, function (data) {
                        console.log(data);
                        if (data) {
                            toastr.success('Added New Item Successfully');
                        }
                    });
                },
                onRowUpdated: function (e) {
                    var model = e.data;
                    console.log(model, ""moDel"");
                    $.post('/Quotation/UpdateSubItem', { model, model }, function (data) {
                        console.log(data);
          ");
            WriteLiteral(@"              if (data) {
                            toastr.success('Update Item Successfully');
                        }
                    });
                },
                onRowRemoved: function (e) {
                    console.log(e);
                    var key = e.data.Id;
                    $.post('/Quotation/DeleteSubItem?key=' + key, function (data) {
                            toastr.error('Deleted Successfully');
                    });
                },
                masterDetail: {
                    enabled: true,
                    template: function (container, options) {
                        console.log(options);
                        $.get('/Quotation/GetSubItemRegions?id=' + options.data.MasterId, function (data) {
                           regionDetail = data;
                            console.log(regionDetail,""regionDetail"");

                            $.get('/Quotation/Getregions', function (data) {
                            regions = data");
            WriteLiteral(@";

                            $('<div>')
                            $(""<div>"")
                                .dxDataGrid({
                                    columnAutoWidth: true,
                                    showBorders: true, 
                                    headerFilter: {
                                        visible: true
                                    },
                                    editing: {
                                        mode: ""cell"",
                                        allowUpdating(e) {
                                            if (subItemRegions && subItemRegions.Update == true) {
                                                return e;
                                            }
                                        },
                                        allowDeleting(e) {
                                            if (subItemRegions && subItemRegions.Delete == true) {
                                                return");
            WriteLiteral(@" e;
                                            }
                                        },
                                        allowAdding: true,
                                        useIcons: true
                                    },
                                    columns: [
                                        {
                                            dataField: 'RegionId',
                                            caption: 'Region',
                                            lookup: {
                                                dataSource: regions,
                                                displayExpr: 'Name',
                                                valueExpr: 'RegionId',
                                            },
                                        }],
                                    toolbar: {
                                        items: [
                                            {
                                            ");
            WriteLiteral(@"    name: 'addRowButton',
                                                showText: 'always',
                                                options: {
                                                    text: 'Add New Region',
                                                    type: 'default',
                                                    visible: test,
                                                },
                                            },

                                        ],
                                    },
                                    onRowInserted: function (e) {
                                        var model = e.data;
                                        model.MasterId = options.data.MasterId;
                                        console.log(model, ""moDel"");
                                        $.post('/Quotation/AddSubRegion', { model, model }, function (data) {
                                            console.log(data);
             ");
            WriteLiteral(@"                               if (data) {
                                                toastr.success('Added New Region Successfully');
                                            }
                                        });
                                    },
                                    onRowUpdated: function (e) {
                                        var model = e.data;
                                        console.log(model, ""moDel"");
                                        $.post('/Quotation/UpdateSubRegion', { model, model }, function (data) {
                                            console.log(data);
                                            if (data) {
                                                toastr.success('Update Region Successfully');
                                            }
                                        });
                                    },
                                    onRowRemoved: function (e) {
                         ");
            WriteLiteral(@"               console.log(e);
                                        var key = e.data.MasterId;
                                        $.post('/Quotation/DeleteSubRegion?key=' + key, function (data) {
                                            if (data) {
                                                toastr.error('Deleted Region Successfully');
                                            }
                                        });
                                    },
                                    dataSource: new DevExpress.data.DataSource({
                                        store: new DevExpress.data.ArrayStore({
                                            data: regionDetail
                                        }),
                                    })
                                }).appendTo(container);
                        });
                    });
                }
                },
                 

            }).dxDataGrid(""instance"");

         ");
            WriteLiteral(@"   $('.dx-datagrid-search-panel').removeClass('dx-state-disabled');
            $('div.dx-texteditor-input-container > input.dx-texteditor-input');
        });
    }
     

    function onSubmit() {
       // var d = document.getElementById('mainItemForm');
        //if (d.checkValidity() && emailValidation() == true && validateMobile() == true) {
        document.getElementById('CompanyId').value = CompanyID;
          var model = $('#mainItemForm').serialize()
        console.log(model, ""model"");
        console.log(regiondropDown, ""regiondropDown"");
        model.ItemRegions = regiondropDown;
        $.post('/Quotation/CreateSubItems?' + model, {regions: regiondropDown }, function (data) { 
            if (data) {
                toastr.success(data.result);
                    setTimeout(function () {
                        window.location.reload();
                    }, 3000);
                }
                else {
                    setTimeout(function () {
                  ");
            WriteLiteral(@"      toastr.error('Error!');
                    }, 2000);

                };
            });
        //}
        //checkValidations();
    }


</script>

<style>

    .dxSelect_Box {
        height: 70% !important;
        border: 1px solid #bfbfbf !important;
    }

    .dxTag_Box {
        height: 46px !important;
        border: 1px solid #bfbfbf !important;
    }

    .mrt_9 {
        margin-top: 9% !important;
    }
</style>

<div class=""row"">
    <div class=""col-md-12 grid-margin stretch-card"">
        <div class=""card"">
            <!-- Card Header - Accordion -->
            <div class=""card-header"">
                <h3 class=""m-0 font-weight-bold text-primary"">Add New Item</h3>
            </div>
            <div class=""card-body"">

                ");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8ece234df7b594184194bff6b0b955bc3d24b1f266e62bbdcdbc06b080c7844c21909", async() => {
                WriteLiteral("\r\n                    <div class=\"form-row\">\r\n");
                WriteLiteral(@"
                        <input type=""hidden"" class=""form-control"" id=""CompanyId"" name=""CompanyId"">

                        <div class=""form-group col-md-4"">
                            <label> MainItem <em class=""text-danger"">*</em></label>
                            <div id=""mainItemDropdown""></div>
                        </div>
                        <div class=""col-md-4"">
                            <div class=""form-group"">
                                <label>Regions </label>
                                <div id=""userRegions""></div>
                            </div>
                        </div>
                    </div>

                    <div class=""form-row"">
                        <div class=""form-group col-md-4"">
                            <label for=""iTem""");
                BeginWriteAttribute("class", " class=\"", 16785, "\"", 16793, 0);
                EndWriteAttribute();
                WriteLiteral(@">Item <em class=""text-danger"">*</em></label>
                            <input type=""text"" class=""form-control"" id=""Name"" name=""Item"" placeholder=""Item Name"" required>
                        </div>
                        <div class=""form-group col-md-4"">
                            <label for=""prIce""");
                BeginWriteAttribute("class", " class=\"", 17102, "\"", 17110, 0);
                EndWriteAttribute();
                WriteLiteral(@">Price <em class=""text-danger"">*</em></label>
                            <input type=""text"" class=""form-control"" id=""Price"" name=""Price"" placeholder=""0"" required>
                        </div>

                    </div>


                    <div class=""col-md-3"">
                        <div class=""form-group"">
                            <button type=""button"" class=""btn btn-gradient-info mr-2 mrt_9"" id=""btnSubmitCreate"" onclick=""onSubmit()"">Save</button>
                        </div>
                    </div>


                ");
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral(@"

            </div>
        </div>
    </div>
</div>


<div class=""row"">
    <div class=""col-12"">
        <div class=""card"">
            <div class=""card-body"">
                <h4 class=""card-title""> Sub Items</h4>

                <div id=""gridContainer""></div>
            </div>
        </div>
    </div>
</div>
 ");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
