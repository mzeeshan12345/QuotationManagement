@{
    Layout = null;
}
<script>


    var clienTs;
    var quotdataCounT;  
    var quoatationID
    var cliEnTID;   

    var isFile;
    var comp1;
    var clients1;
    var users1;
    var xdx;
    var Pages;
    var repoRt;
    var getPages;
    var tc;
    var types = ['area', 'stackedarea', 'fullstackedarea'];

    var approvedsales; 
    var rejecT;
    var isSuperadMin;

    var quotdata = [];
    var quotes;
    var quotesDetail;
    var comp;
    var tc;
    var url = "";
    var cv = "";
    var clients;
    var date;
    var penDinG;
    var draFts;
    var users;

    var dataSource;
    var dataSource1;

    $(function () {

        getPages = JSON.parse(localStorage.getItem('Pages'));
        Pages = getPages.find(dx => dx.PageName == "Quotation");

        if (Pages.Create == true) {
            $("#createQuotation").show();
        }
        else {
            $("#createQuotation").hide();
        }

        GetApprovedsales();
        getPendingCounts();
        getRejectCounts();
        getQuotesCount();
        getDraftCounts();
        getQuotes();

        GetStaticsQuotes();
        getcharts();
    });



    function GetStaticsQuotes() {
        $.get('/Home/GetSalesQuotationstatics', function (data) {
            dataSource = data;
            console.log(dataSource, "D1");


            $('#chart').dxChart({
                dataSource,
                palette: 'soft',
                title: {
                    text: 'Status Statics',
                    //subtitle: 'as of  2017',
                },
                commonSeriesSettings: {
                    type: 'bar',
                    valueField: 'Count',
                    argumentField: 'Status',
                    ignoreEmptyPoints: true,
                },
                seriesTemplate: {
                    nameField: 'Status',
                },
            });
        });
    }

    function getcharts() {
        $.get('/Home/GetSalesQuotationstatics', function (data) {
            dataSource = data;
            $('#charTStatic').dxPieChart({
                size: {
                    width: 500,
                },
                palette: 'bright',
                dataSource,
                series: [
                    {
                        argumentField: 'Status',
                        valueField: 'Count',
                        label: {
                            visible: true,
                            connector: {
                                visible: true,
                                width: 1,
                            },
                        },
                    },
                ],
                title: 'Quotation Statics',
                export: {
                    enabled: true,
                },
                onPointClick(e) {
                    const point = e.target;

                    toggleVisibility(point);
                },
                onLegendClick(e) {
                    const arg = e.target;

                    toggleVisibility(this.getAllSeries()[0].getPointsByArg(arg)[0]);
                },
            });

            function toggleVisibility(item) {
                if (item.isVisible()) {
                    item.hide();
                } else {
                    item.show();
                }
            }

        });
    }

    function getQuotesCount() {
        $.get('/Home/GetSalesQuotations', function (data) {
            quotdataCounT = data;
            console.log(quotdataCounT, "quOtdatA");
            $('#quoTeCount').html(quotdataCounT);
        });
    }


    function GetApprovedsales() {
        $.get('/Home/GetSalesApproved', function (data) {
            approvedsales = data;
            $('#ApprovedsslesCount').html(approvedsales);
        });
    }

    function getRejectCounts() {
        $.get('/Home/GetSalesReject', function (data) {
            rejecT = data;
            $('#rejecTCount').html(rejecT);
        });
    }

    function getPendingCounts() {
        $.get('/Home/GetSalesPending', function (data) {
            penDinG = data;
            $('#PenDingsCount').html(penDinG);
        });
    }

    function getDraftCounts() {
        $.get('/Home/GetDraftQuotation', function (data) {
            draFts = data;
            $('#draFtsCount').html(draFts);
        });
    }

      function getHQuotes() {

        //****Get Current User with roles*****
        $.get('@Url.Action("CurrentUserList", "Admin")', function (data) {
            roles = data;
            console.log(roles.result, "result roLes");

        });
    }


    function getQuotes() {
        $.get('/Home/GetAllQuotations', function (data) {
            quotdata = data;
            console.log(quotdata)
            Quotationgrid(quotdata);
        });
    }

    function Quotationgrid(quotdata) {
        $.get('/Company/GetCompanies', function (data) {
            comp = data;

            $.get('/Admin/GetAllClients', function (data) {
                clients = data;

                $.get('/User/GetUsers', function (data) {
                    users = data;
                    console.log(users, "usrS");


                    const isChief = function (position) {
                        //return position && position == true;
                        return position && ['Approved'].indexOf(position.trim()) >= 0;
                    };


                    $("#gridContainer").dxDataGrid({
                        dataSource: quotdata,
                        keyExpr: "QuotationId",
                        showBorders: true,
                        columnAutoWidth: true,
                        allowColumnResizing: true,
                        columnHidingEnabled: true,
                        hoverStateEnabled: true,
                        paging: {
                            pageSize: 12
                        },
                        pager: {
                            visible: true,
                            allowedPageSizes: [5, 10, 'all'],
                            showPageSizeSelector: true,
                            showInfo: true,
                            showNavigationButtons: true,
                        },
                        editing: {
                            mode: 'row',
                            allowUpdating(e) {
                                if (Pages.Update == true) {
                                    return e;
                                }
                            },
                            useIcons: true
                        },
                        columnsAutoWidth: true,
                        showBorders: true,
                        filterRow: {
                            visible: true,
                            applyFilter: "auto"
                        },
                        searchPanel: {
                            visible: true,
                            placeholder: "Search..."
                        },
                        export: {
                            enabled: true,
                        },
                        onExporting: function (e) {
                            console.log(e, "e");
                            e.fileName = "Quotation List"
                        },
                        headerFilter: {
                            visible: true
                        },
                        columns: [

                            {
                                dataField: 'CompanyId',
                                caption: 'Company',
                                lookup: {
                                    dataSource: comp,
                                    displayExpr: 'CompanyName',
                                    valueExpr: 'CompanyId',
                                },
                            },
                            {
                                dataField: "CreatedAt",
                                caption: 'Created Date',
                                dataType: "datetime",
                                format: "dd/MMM/yyyy",
                                allowEditing: false
                            },
                            {
                                dataField: 'ClientId',
                                caption: 'Client',
                                lookup: {
                                    dataSource: clients,
                                    displayExpr: 'ClientName',
                                    valueExpr: 'ClientId',
                                },
                            },
                            {
                                dataField: 'UserId',
                                caption: 'User',
                                lookup: {
                                    dataSource: users,
                                    displayExpr: 'Name',
                                    valueExpr: 'Id',
                                },
                            },
                            {
                                dataField: "Status"
                            },
                            //{
                            //    dataField: "EmailStatus",
                            //    dataTtpe: "boolean",
                            //    width: 140
                            //},
                            {
                                type: "buttons",
                                buttons: ["edit", "Send",
                                    {
                                        hint: "View Report and Send Email",
                                        icon: "exportpdf",
                                        visible: function (e) {
                                            var repoRt = getPages.find(dx => dx.PageName == "View Report");
                                            if (repoRt && repoRt.Read == true) {
                                                return e;
                                            }
                                            else {
                                                return e.column.visible = false;
                                            }
                                        },
                                        onClick: function (e) {
                                            $("#btn_email").hide();
                                            $("#myModal").modal();

                                            var compID = e.row.data.CompanyId;
                                            var clientID = e.row.data.ClientId;
                                            var quoteId = e.row.data.QuotationId;
                                            //$.get('/Report/ViewReport?Id=' + compID + '&cId=' + clientID, function (data) {
                                            $.get('/Report/ViewReport?Id=' + compID + '&cId=' + clientID + '&quoteID=' + quoteId, function (data) {
                                                $('#repotdata').html(data);
                                                setTimeout(function () {
                                                    $("#load").hide();
                                                    $("#btn_email").show();
                                                }, 1000);
                                            });

                                            cliEnTID = e.row.data.ClientId;
                                            quoatationID = e.row.data.QuotationId;
                                        },

                                    },
                                    {
                                        hint: "View History",
                                        icon: "mdi mdi-history",
                                        visible: function (e) {
                                            var hisTorY = getPages.find(dx => dx.PageName == "Quotation History");
                                            console.log(repoRt, 'rePorT');
                                            if (hisTorY && hisTorY.Read == true) {
                                                return e;
                                            }
                                            else {
                                                return e.column.visible = false;
                                            }
                                        },
                                        onClick: function (e) {
                                            $("#historyModal").modal();
                                            getHQuotes();
                                            var dxdx = roles.result.filter(r => r.RoleName == 'SuperAdmin' || r.RoleName == 'Manager');
                                            console.log(dxdx.length, "dxsdx");
                                            if (dxdx.length > 0) {
                                                $.get('/Quotation/GetAllHQuotations?iD=' + e.row.data.QuotationId, function (data) {
                                                    quotHdata = data;
                                                    console.log(quotHdata, "quoTHistorYALL")
                                                    QuotationHgrid(quotHdata);
                                                });
                                            }
                                            else {
                                                $.get('/Quotation/GetQuotationss?id=' + e.row.data.QuotationId, function (data) {
                                                    quotHdata = data;
                                                    console.log(quotHdata, "quoTHistorYbyUser")
                                                    QuotationHgrid(quotHdata);
                                                });
                                            }


                                        }
                                    } ]
                            }],
                        masterDetail: {
                            enabled: true,
                            template: function (container, options) {
                                $.get('/Quotation/GetItemLists', function (data) {
                                    quotesDetail = data;
                                    console.log(quotesDetail);
                                    $('<div>')
                                    $("<div>")
                                        .dxDataGrid({
                                            columnAutoWidth: true,
                                            showBorders: true,
                                            filterRow: {
                                                visible: true,
                                                applyFilter: "auto"
                                            },
                                            searchPanel: {
                                                visible: true,
                                                width: 240,
                                                placeholder: "Search..."
                                            },
                                            headerFilter: {
                                                visible: true
                                            },
                                            columns: [
                                                {
                                                    dataField: "MasterDetailId",
                                                    caption: 'No',
                                                    allowEditing: false
                                                },

                                                {
                                                    dataField: 'MasterId',
                                                    caption: 'Description',
                                                    lookup: {
                                                        dataSource: quotesDetail,
                                                        displayExpr: 'Item',
                                                        valueExpr: 'MasterId',
                                                    },
                                                },

                                                {
                                                    dataField: "Price",
                                                    allowEditing: false
                                                },
                                                {
                                                    dataField: "Quantity",
                                                    caption: 'Qty'
                                                },
                                                {
                                                    dataField: "Payable",
                                                    allowEditing: false,
                                                    //dataType: "number",
                                                    caption: 'Total Amount Payable',
                                                    type: "fixedPoint",
                                                    precision: 2,
                                                    calculateCellValue(rowData) {
                                                        return rowData.Payable = rowData.Quantity * rowData.Price;
                                                    },
                                                }],
                                            summary: {
                                                totalItems: [{
                                                    column: 'Payable',
                                                    summaryType: 'sum'
                                                }],
                                            },
                                            dataSource: new DevExpress.data.DataSource({
                                                store: new DevExpress.data.ArrayStore({
                                                    data: options.data.Master_Detail_Tables
                                                }),
                                            })
                                        }).appendTo(container);
                                });
                            }
                        },

                        //onToolbarPreparing: function (e) {
                        //    var dataGrid = e.component;
                        //    e.toolbarOptions.items.unshift({
                        //        location: "after",
                        //        widget: "dxButton",
                        //        options: {
                        //            icon: "add",
                        //            onClick: function () {
                        //                top.location.href = '/Quotation/CreateQuotation';
                        //            }
                        //        }
                        //    });
                        //},
                        onEditingStart: function (e) {
                            console.log(e);
                            var quoTatiOn = e.data.QuotationId;
                            console.log(quoTatiOn, "iD");
                            top.location.href = '/Quotation/UpdateQuotation?id=' + quoTatiOn;
                        }
                    });

                });
            });
        });
    }

    function sendEmail() {
        console.log(cliEnTID, "CCCiD");
        console.log(quoatationID, "QQQiD");
        $.get('/Admin/GetClient?id=' + cliEnTID, function (data) {
            var custoMers = data;
            var model = {
                Email: custoMers.Email,
                ClientName: custoMers.ClientName,
                QuotationID: quoatationID
            }
            console.log(model, "DaTa");
            //$.post('/Admin/SubmitReport?email=' + custoMers.Email + '&QuotationID=' + quoatationID, function (data) {
            $.post('/Admin/SubmitReport', { model, model }, function (data) {
                console.log(data, "daTa");
                if (data.Success) {
                    toastr.success(data.Success);
                }
                else if (data.Message) {
                    toastr.warning(data.Message);
                }
            })
        });
    }
</script>

<style>
    .card_height {
        height: 150px !important;
    }

    .dxrd-image-fullscreen, .dxrd-toolbar-item-separator, .dxrd-image-print-page,
    .dxrd-image-search, .dxrd-preview-export-toolbar-item, .dxrd-toolbar-item-zoom {
        display: none !important;
    }

    .loader {
        position: relative;
        text-align: center;
        margin: 15px auto 35px auto;
        z-index: 9999;
        display: block;
        width: 80px;
        height: 80px;
        border: 10px solid rgba(0, 0, 0, .3);
        border-radius: 50%;
        border-top-color: #000;
        animation: spin 1s ease-in-out infinite;
        -webkit-animation: spin 1s ease-in-out infinite;
    }
</style>
<div class="row">
    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-danger card-img-holder text-white card_height">
            <div class="card-body">
                <img src="/Web/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Quotations <i class="mdi mdi-file-pdf mdi-24px float-right"></i>
                </h4>
                <h2 class="mb-5" id="quoTeCount"></h2>
                @*<h6 class="card-text">Increased by 60%</h6>*@
            </div>
        </div>
    </div>
    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-info card-img-holder text-white card_height">
            <div class="card-body">
                <img src="/Web/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Approved  <i class="mdi mdi-file-check mdi-24px float-right"></i>
                </h4>
                <h2 class="mb-5" id="ApprovedsslesCount"></h2>
                <h6 class="card-text">@*Decreased by 10%*@</h6>
            </div>
        </div>
    </div>

    <div class="col-md-4 stretch-card grid-margin">
        <div class="card bg-gradient-info card-img-holder text-white card_height">
            <div class="card-body">
                <img src="/Web/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Pending  <i class="mdi mdi-file-powerpoint mdi-24px float-right"></i>
                </h4>
                <h2 class="mb-5" id="PenDingsCount"></h2>
                <h6 class="card-text">@*Decreased by 10%*@</h6>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6 stretch-card grid-margin">
        <div class="card bg-gradient-success card-img-holder text-white card_height">
            <div class="card-body">
                <img src="/Web/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Reject <i class="mdi mdi-close-box mdi-24px float-right"></i>
                </h4>
                <h2 class="mb-5" id="rejecTCount"></h2>
                @*<h6 class="card-text">Increased by 5%</h6>*@
            </div>
        </div>
    </div>

    <div class="col-md-6 stretch-card grid-margin">
        <div class="card bg-gradient-success card-img-holder text-white card_height">
            <div class="card-body">
                <img src="/Web/assets/images/dashboard/circle.svg" class="card-img-absolute" alt="circle-image" />
                <h4 class="font-weight-normal mb-3">
                    Drafts <i class="mdi mdi-file-multiple mdi-24px float-right"></i>
                </h4>
                <h2 class="mb-5" id="draFtsCount"></h2>
                @*<h6 class="card-text">Increased by 5%</h6>*@
            </div>
        </div>
    </div>
</div>


<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
            </div>
            <div class="card-body">
                <div id="chart"></div>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
            </div>
            <div class="card-body">
                <div id="charTStatic"></div>
            </div>
        </div>
    </div>
</div>

<br />

<div class="card">
    <div class="card-header">
        <h3 style="display: inline-block;">Quotations</h3>
        <button type="button" onclick="location.href='/Quotation/CreateQuotation'" id="createQuotation" class="btn btn-info btn-fw float-right">Add New Quotation</button>
    </div>
    <div class="card-body">
        <div class="row">
            <div id="gridContainer"></div>
        </div>
    </div>
</div>



<!-- Modal -->
<div class="modal fade bd-example-modal-lg" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Report</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <div id="load">
                    <div class="loader"></div>
                    @*<div clas="loader-txt text-center">
                            <p>Loading ........</p>
                        </div>*@
                </div>

                <div class="row" id="btn_email">
                    <div class="col-md-12">
                        <button type="button" class="btn btn-gradient-info btn-icon-text float-right" onclick="sendEmail()">
                            Send <i class="mdi mdi-email btn-icon-append"></i>
                        </button>
                    </div>
                </div>
                <hr />

                <div id="repotdata"> </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-dark btn-fw" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>





